{
	"address": "0x0F2424054Bb7A0e32F16D78eed5603fD20D6f039",
	"abi": [
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_TCO2Faucet",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "_TCO2Token",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "_EPNS_COMM_ADDRESS",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "_LINK_TOKEN_ADDRESS",
					"type": "address"
				},
				{
					"internalType": "string[]",
					"name": "_certificateArgs",
					"type": "string[]"
				},
				{
					"internalType": "address[]",
					"name": "_calculatorArgs",
					"type": "address[]"
				}
			],
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "allowance",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "needed",
					"type": "uint256"
				}
			],
			"name": "ERC20InsufficientAllowance",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "sender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "balance",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "needed",
					"type": "uint256"
				}
			],
			"name": "ERC20InsufficientBalance",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "approver",
					"type": "address"
				}
			],
			"name": "ERC20InvalidApprover",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "receiver",
					"type": "address"
				}
			],
			"name": "ERC20InvalidReceiver",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "sender",
					"type": "address"
				}
			],
			"name": "ERC20InvalidSender",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				}
			],
			"name": "ERC20InvalidSpender",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "OwnableInvalidOwner",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "OwnableUnauthorizedAccount",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "length",
					"type": "uint256"
				}
			],
			"name": "StringsInsufficientHexLength",
			"type": "error"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "Approval",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "buyer",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "BougthCarbonCredits",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "bytes32",
					"name": "requestId",
					"type": "bytes32"
				},
				{
					"indexed": false,
					"internalType": "string",
					"name": "moneySpentProteins",
					"type": "string"
				},
				{
					"indexed": false,
					"internalType": "string",
					"name": "moneySpentFats",
					"type": "string"
				},
				{
					"indexed": false,
					"internalType": "string",
					"name": "moneySpentCarbs",
					"type": "string"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "proteinsEmission",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "fatsEmission",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "carbsEmission",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "foodEmission",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "address",
					"name": "buyer",
					"type": "address"
				}
			],
			"name": "GroceryCarbonFootprintOffset",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "previousOwner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "OwnershipTransferred",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "buyer",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "certificateId",
					"type": "uint256"
				}
			],
			"name": "RetiredCarbonCredits",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "Transfer",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "bytes32",
					"name": "requestId",
					"type": "bytes32"
				},
				{
					"indexed": false,
					"internalType": "string",
					"name": "distance",
					"type": "string"
				},
				{
					"indexed": false,
					"internalType": "string",
					"name": "nights",
					"type": "string"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "flightEmission",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "hotelEmission",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "travelEmission",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "address",
					"name": "buyer",
					"type": "address"
				}
			],
			"name": "TravelCarbonFootprintOffset",
			"type": "event"
		},
		{
			"inputs": [],
			"name": "CARBON_CALCULATOR_ADDRESS",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "CARBON_CERTIFICATE_ADDRESS",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "EPNS_COMM_ADDRESS",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "LINK_TOKEN_ADDRESS",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "TCO2FaucetExtense",
			"outputs": [
				{
					"internalType": "contract ITCO2Faucet",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "TCO2TokenExtense",
			"outputs": [
				{
					"internalType": "contract ITCO2Token",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "TCO2TokensInContract",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				}
			],
			"name": "allowance",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "approve",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "balanceOf",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "burn",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "burnFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_buyer",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "_amount",
					"type": "uint256"
				}
			],
			"name": "buyCarbonCredits",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "carbonTokensMinted",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "decimals",
			"outputs": [
				{
					"internalType": "uint8",
					"name": "",
					"type": "uint8"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"name": "groceryRequests",
			"outputs": [
				{
					"internalType": "string",
					"name": "moneySpentProteins",
					"type": "string"
				},
				{
					"internalType": "string",
					"name": "moneySpentFats",
					"type": "string"
				},
				{
					"internalType": "string",
					"name": "moneySpentCarbs",
					"type": "string"
				},
				{
					"internalType": "uint256",
					"name": "proteinsEmission",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "fatsEmission",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "carbsEmission",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "foodEmission",
					"type": "uint256"
				},
				{
					"internalType": "address",
					"name": "buyer",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "name",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "_requestId",
					"type": "bytes32"
				},
				{
					"internalType": "string",
					"name": "_flag",
					"type": "string"
				},
				{
					"internalType": "string[]",
					"name": "_args",
					"type": "string[]"
				},
				{
					"internalType": "uint256[]",
					"name": "_returns",
					"type": "uint256[]"
				},
				{
					"internalType": "address",
					"name": "_buyer",
					"type": "address"
				}
			],
			"name": "offsetCarbonFootprint",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "owner",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "renounceOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_buyer",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "_amount",
					"type": "uint256"
				}
			],
			"name": "retireCarbonCredits",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "symbol",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "totalSupply",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "transfer",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "transferFrom",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "transferOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"name": "travelRequests",
			"outputs": [
				{
					"internalType": "string",
					"name": "distance",
					"type": "string"
				},
				{
					"internalType": "string",
					"name": "nights",
					"type": "string"
				},
				{
					"internalType": "uint256",
					"name": "flightEmission",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "hotelEmission",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "travelEmission",
					"type": "uint256"
				},
				{
					"internalType": "address",
					"name": "buyer",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "withdrawFunds",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "withdrawTCO2Tokens",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"stateMutability": "payable",
			"type": "receive"
		}
	],
	"transactionHash": "0x4369cc76d45eac75d9c10b015259e622f131229929d66f7d9df29295171f5a76",
	"receipt": {
		"to": null,
		"from": "0xE8e1543235e6C35C656ef0b28526C61571583f4B",
		"contractAddress": "0x0F2424054Bb7A0e32F16D78eed5603fD20D6f039",
		"transactionIndex": 9,
		"gasUsed": "5554380",
		"logsBloom": "0x
		"blockHash": "0x7a685adc19ab00d87ac2b6c2388a357c7de7f1bc3c507613a20fb09cf6ab7a3a",
		"transactionHash": "0x4369cc76d45eac75d9c10b015259e622f131229929d66f7d9df29295171f5a76",
		"logs": [
			{
				"transactionIndex": 9,
				"blockNumber": 41267237,
				"transactionHash": "0x4369cc76d45eac75d9c10b015259e622f131229929d66f7d9df29295171f5a76",
				"address": "0x0F2424054Bb7A0e32F16D78eed5603fD20D6f039",
				"topics": [
					"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
					"0x0000000000000000000000000000000000000000000000000000000000000000",
					"0x000000000000000000000000e8e1543235e6c35c656ef0b28526c61571583f4b"
				],
				"data": "0x",
				"logIndex": 34,
				"blockHash": "0x7a685adc19ab00d87ac2b6c2388a357c7de7f1bc3c507613a20fb09cf6ab7a3a"
			},
			{
				"transactionIndex": 9,
				"blockNumber": 41267237,
				"transactionHash": "0x4369cc76d45eac75d9c10b015259e622f131229929d66f7d9df29295171f5a76",
				"address": "0x33E54AAB4eb430d724cf69d0223687f1C905EC4f",
				"topics": [
					"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
					"0x0000000000000000000000000000000000000000000000000000000000000000",
					"0x0000000000000000000000000f2424054bb7a0e32f16d78eed5603fd20d6f039"
				],
				"data": "0x",
				"logIndex": 35,
				"blockHash": "0x7a685adc19ab00d87ac2b6c2388a357c7de7f1bc3c507613a20fb09cf6ab7a3a"
			},
			{
				"transactionIndex": 9,
				"blockNumber": 41267237,
				"transactionHash": "0x4369cc76d45eac75d9c10b015259e622f131229929d66f7d9df29295171f5a76",
				"address": "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
				"topics": [
					"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
					"0x0000000000000000000000000f2424054bb7a0e32f16d78eed5603fd20d6f039",
					"0x0000000000000000000000007188a35c24c1e148128cfff764dfd36e19565276"
				],
				"data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
				"logIndex": 36,
				"blockHash": "0x7a685adc19ab00d87ac2b6c2388a357c7de7f1bc3c507613a20fb09cf6ab7a3a"
			},
			{
				"transactionIndex": 9,
				"blockNumber": 41267237,
				"transactionHash": "0x4369cc76d45eac75d9c10b015259e622f131229929d66f7d9df29295171f5a76",
				"address": "0x0000000000000000000000000000000000001010",
				"topics": [
					"0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
					"0x0000000000000000000000000000000000000000000000000000000000001010",
					"0x000000000000000000000000e8e1543235e6c35c656ef0b28526c61571583f4b",
					"0x00000000000000000000000004ba3ef4c023c1006019a0f9baf6e70455e41fcf"
				],
				"data": "0x00000000000000000000000000000000000000000000000000c554caaf2da340000000000000000000000000000000000000000000000000163860387172134700000000000000000000000000000000000000000000000c7a0f8b124ff16d9c00000000000000000000000000000000000000000000000015730b6dc244700700000000000000000000000000000000000000000000000c7ad4dfdcff1f10dc",
				"logIndex": 37,
				"blockHash": "0x7a685adc19ab00d87ac2b6c2388a357c7de7f1bc3c507613a20fb09cf6ab7a3a"
			}
		],
		"blockNumber": 41267237,
		"cumulativeGasUsed": "6695996",
		"status": 1,
		"byzantium": true
	},
	"args": [
		"0x996b39698CF96A70B7a7005B5d1924a66C5E8f0e",
		"0xa5831eb637dff307395b5183c86B04c69C518681",
		"0xb3971BCef2D791bc4027BbfedFb47319A4AAaaAa",
		"0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
		["Certificate", "CERT", "https://api.carbon.fyi/certificate/"],
		["0x6E2dc0F9DB014aE19888F539E59285D2Ea04244C"]
	],
	"numDeployments": 2,
	"solcInputHash": "91dacffc69e9c1dfbe0084b86e0479ec",
	"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TCO2Faucet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_TCO2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_EPNS_COMM_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LINK_TOKEN_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_certificateArgs\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_calculatorArgs\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BougthCarbonCredits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"moneySpentProteins\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"moneySpentFats\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"moneySpentCarbs\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proteinsEmission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fatsEmission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"carbsEmission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"foodEmission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"GroceryCarbonFootprintOffset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"certificateId\",\"type\":\"uint256\"}],\"name\":\"RetiredCarbonCredits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"distance\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nights\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flightEmission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hotelEmission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"travelEmission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"TravelCarbonFootprintOffset\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CARBON_CALCULATOR_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CARBON_CERTIFICATE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EPNS_COMM_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINK_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TCO2FaucetExtense\",\"outputs\":[{\"internalType\":\"contract ITCO2Faucet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TCO2TokenExtense\",\"outputs\":[{\"internalType\":\"contract ITCO2Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TCO2TokensInContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyCarbonCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"carbonTokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"groceryRequests\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"moneySpentProteins\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"moneySpentFats\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"moneySpentCarbs\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"proteinsEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fatsEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"carbsEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"foodEmission\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_flag\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_args\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_returns\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"offsetCarbonFootprint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"retireCarbonCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"travelRequests\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"distance\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nights\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"flightEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hotelEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"travelEmission\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTCO2Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Carbon.sol\":\"Carbon\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Subscription interface.\\ninterface IFunctionsSubscriptions {\\n  struct Subscription {\\n    uint96 balance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Common LINK balance that is controlled by the Router to be used for all consumer requests.\\n    address owner; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The owner can fund/withdraw/cancel the subscription.\\n    uint96 blockedBalance; // \\u2550\\u2550\\u2557 LINK balance that is reserved to pay for pending consumer requests.\\n    address proposedOwner; // \\u2550\\u2550\\u255d For safely transferring sub ownership.\\n    address[] consumers; // \\u2550\\u2550\\u2550\\u2550\\u2578 Client contracts that can use the subscription\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n  }\\n\\n  struct Consumer {\\n    bool allowed; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Owner can fund/withdraw/cancel the sub.\\n    uint64 initiatedRequests; //   \\u2551 The number of requests that have been started\\n    uint64 completedRequests; // \\u2550\\u2550\\u255d The number of requests that have successfully completed or timed out\\n  }\\n\\n  /// @notice Get details about a subscription.\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return subscription - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscription(uint64 subscriptionId) external view returns (Subscription memory);\\n\\n  /// @notice Retrieve details about multiple subscriptions using an inclusive range\\n  /// @param subscriptionIdStart - the ID of the subscription to start the range at\\n  /// @param subscriptionIdEnd - the ID of the subscription to end the range at\\n  /// @return subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscriptionsInRange(\\n    uint64 subscriptionIdStart,\\n    uint64 subscriptionIdEnd\\n  ) external view returns (Subscription[] memory);\\n\\n  /// @notice Get details about a consumer of a subscription.\\n  /// @param client - the consumer contract address\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return consumer - see IFunctionsSubscriptions.Consumer for more information on the structure\\n  function getConsumer(address client, uint64 subscriptionId) external view returns (Consumer memory);\\n\\n  /// @notice Get details about the total amount of LINK within the system\\n  /// @return totalBalance - total Juels of LINK held by the contract\\n  function getTotalBalance() external view returns (uint96);\\n\\n  /// @notice Get details about the total number of subscription accounts\\n  /// @return count - total number of subscriptions in the system\\n  function getSubscriptionCount() external view returns (uint64);\\n\\n  /// @notice Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled\\n  /// @param requestsToTimeoutByCommitment - A list of request commitments to time out\\n  /// @dev The commitment can be found on the \\\"OracleRequest\\\" event created when sending the request.\\n  function timeoutRequests(FunctionsResponse.Commitment[] calldata requestsToTimeoutByCommitment) external;\\n\\n  /// @notice Oracle withdraw LINK earned through fulfilling requests\\n  /// @notice If amount is 0 the full balance will be withdrawn\\n  /// @notice Both signing and transmitting wallets will have a balance to withdraw\\n  /// @param recipient where to send the funds\\n  /// @param amount amount to withdraw\\n  function oracleWithdraw(address recipient, uint96 amount) external;\\n\\n  /// @notice Owner cancel subscription, sends remaining link directly to the subscription owner.\\n  /// @dev Only callable by the Router Owner\\n  /// @param subscriptionId subscription id\\n  /// @dev notably can be called even if there are pending requests, outstanding ones may fail onchain\\n  function ownerCancelSubscription(uint64 subscriptionId) external;\\n\\n  /// @notice Recover link sent with transfer instead of transferAndCall.\\n  /// @dev Only callable by the Router Owner\\n  /// @param to address to send link to\\n  function recoverFunds(address to) external;\\n\\n  /// @notice Create a new subscription.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscription() external returns (uint64);\\n\\n  /// @notice Create a new subscription and add a consumer.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscriptionWithConsumer(address consumer) external returns (uint64 subscriptionId);\\n\\n  /// @notice Propose a new owner for a subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param newOwner - proposed new owner of the subscription\\n  function proposeSubscriptionOwnerTransfer(uint64 subscriptionId, address newOwner) external;\\n\\n  /// @notice Accept an ownership transfer.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @dev will revert if original owner of subscriptionId has not requested that msg.sender become the new owner.\\n  function acceptSubscriptionOwnerTransfer(uint64 subscriptionId) external;\\n\\n  /// @notice Remove a consumer from a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - Consumer to remove from the subscription\\n  function removeConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Add a consumer to a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - New consumer which can use the subscription\\n  function addConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Cancel a subscription\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param to - Where to send the remaining LINK to\\n  function cancelSubscription(uint64 subscriptionId, address to) external;\\n\\n  /// @notice Check to see if there exists a request commitment for all consumers for a given sub.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return true if there exists at least one unfulfilled request for the subscription, false otherwise.\\n  /// @dev Looping is bounded to MAX_CONSUMERS*(number of DONs).\\n  /// @dev Used to disable subscription canceling while outstanding request are present.\\n  function pendingRequestExists(uint64 subscriptionId) external view returns (bool);\\n\\n  /// @notice Set subscription specific flags for a subscription.\\n  /// Each byte of the flag is used to represent a resource tier that the subscription can utilize.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param flags - desired flag values\\n  function setFlags(uint64 subscriptionId, bytes32 flags) external;\\n\\n  /// @notice Get flags for a given subscription.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return flags - current flag values\\n  function getFlags(uint64 subscriptionId) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xab83613f1bb1cbdbf15fdbb6382259e2b2678bfe5a3a6dab976cdf2337f1f94e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0x149120505b75984b482bc93eb8a59a0ab0bf812a67d8b4e70c5ec989400a7890\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsSubscriptions} from \\\"../interfaces/IFunctionsSubscriptions.sol\\\";\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0x219b5272fd44aeade22130bb9b57b748950febb2f406d5e813ddaa14cd98147c\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x215529a99534a40e6257ef2282a91ea4a95b66debc3997866406907622efb405\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/Calculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsClient} from '@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol';\\nimport {ConfirmedOwner} from '@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol';\\nimport {FunctionsRequest} from '@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol';\\n\\nimport './helpers/helpers.sol';\\n\\n/**\\n * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.\\n * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.\\n * DO NOT USE THIS CODE IN PRODUCTION.\\n */\\ncontract Calculator is FunctionsClient, ConfirmedOwner, Helpers {\\n\\tusing FunctionsRequest for FunctionsRequest.Request;\\n\\n\\tbytes32 public s_lastRequestId;\\n\\tbytes public s_lastResponse;\\n\\tbytes public s_lastError;\\n\\n\\taddress public s_lastBuyer;\\n\\tstring public s_lastFlag;\\n\\tstring[] public s_lastArgs;\\n\\tuint256[] public s_lastReturns;\\n\\n\\terror UnexpectedRequestID(bytes32 requestId);\\n\\n\\tevent Response(bytes32 indexed requestId, bytes response, bytes err);\\n\\n\\tevent CarbonFootprintCalculated(\\n\\t\\tbytes32 indexed requestId,\\n\\t\\tstring s_lastFlag,\\n\\t\\tstring[] s_lastArgs,\\n\\t\\tuint256[] s_lastReturns,\\n\\t\\taddress s_lastBuyer\\n\\t);\\n\\n\\tconstructor(\\n\\t\\taddress router\\n\\t) FunctionsClient(router) ConfirmedOwner(msg.sender) {}\\n\\n\\t/**\\n\\t * @notice Send a simple request\\n\\t * @param source JavaScript source code\\n\\t * @param encryptedSecretsUrls Encrypted URLs where to fetch user secrets\\n\\t * @param donHostedSecretsSlotID Don hosted secrets slotId\\n\\t * @param donHostedSecretsVersion Don hosted secrets version\\n\\t * @param args List of arguments accessible from within the source code\\n\\t * @param bytesArgs Array of bytes arguments, represented as hex strings\\n\\t * @param subscriptionId Billing ID\\n\\t */\\n\\tfunction sendRequest(\\n\\t\\taddress buyer,\\n\\t\\tstring memory flag,\\n\\t\\tstring memory source,\\n\\t\\tbytes memory encryptedSecretsUrls,\\n\\t\\tuint8 donHostedSecretsSlotID,\\n\\t\\tuint64 donHostedSecretsVersion,\\n\\t\\tstring[] memory args,\\n\\t\\tbytes[] memory bytesArgs,\\n\\t\\tuint64 subscriptionId,\\n\\t\\tuint32 gasLimit,\\n\\t\\tbytes32 jobId\\n\\t) external returns (bytes32 requestId) {\\n\\t\\tFunctionsRequest.Request memory req;\\n\\t\\treq.initializeRequestForInlineJavaScript(source);\\n\\n\\t\\tif (encryptedSecretsUrls.length > 0)\\n\\t\\t\\treq.addSecretsReference(encryptedSecretsUrls);\\n\\t\\telse if (donHostedSecretsVersion > 0) {\\n\\t\\t\\treq.addDONHostedSecrets(donHostedSecretsSlotID, donHostedSecretsVersion);\\n\\t\\t}\\n\\n\\t\\tif (args.length > 0) req.setArgs(args);\\n\\n\\t\\tif (bytesArgs.length > 0) req.setBytesArgs(bytesArgs);\\n\\n\\t\\ts_lastBuyer = buyer;\\n\\t\\ts_lastFlag = flag;\\n\\t\\ts_lastArgs = args;\\n\\n\\t\\ts_lastRequestId = _sendRequest(\\n\\t\\t\\treq.encodeCBOR(),\\n\\t\\t\\tsubscriptionId,\\n\\t\\t\\tgasLimit,\\n\\t\\t\\tjobId\\n\\t\\t);\\n\\n\\t\\treturn s_lastRequestId;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Send a pre-encoded CBOR request\\n\\t * @param request CBOR-encoded request data\\n\\t * @param subscriptionId Billing ID\\n\\t * @param gasLimit The maximum amount of gas the request can consume\\n\\t * @param jobId ID of the job to be invoked\\n\\t * @return requestId The ID of the sent request\\n\\t */\\n\\tfunction sendRequestCBOR(\\n\\t\\tbytes memory request,\\n\\t\\tuint64 subscriptionId,\\n\\t\\tuint32 gasLimit,\\n\\t\\tbytes32 jobId\\n\\t) external onlyOwner returns (bytes32 requestId) {\\n\\t\\ts_lastRequestId = _sendRequest(request, subscriptionId, gasLimit, jobId);\\n\\t\\treturn s_lastRequestId;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Store latest result/error\\n\\t * @param requestId The request ID, returned by sendRequest()\\n\\t * @param response Aggregated response from the user code\\n\\t * @param err Aggregated error from the user code or from the execution pipeline\\n\\t * Either response or error parameter will be set, but never both\\n\\t */\\n\\tfunction fulfillRequest(\\n\\t\\tbytes32 requestId,\\n\\t\\tbytes memory response,\\n\\t\\tbytes memory err\\n\\t) internal override {\\n\\t\\tif (s_lastRequestId != requestId) {\\n\\t\\t\\trevert UnexpectedRequestID(requestId);\\n\\t\\t}\\n\\n\\t\\tif (response.length > 0 && equal(s_lastFlag, 'travel')) {\\n\\t\\t\\tuint256 carbonFootprint = abi.decode(response, (uint256));\\n\\t\\t\\tuint256 factor = 10 ** 18;\\n\\n\\t\\t\\tuint256 _distance = carbonFootprint / (factor * factor);\\n\\t\\t\\tcarbonFootprint %= (factor * factor);\\n\\n\\t\\t\\tuint256 _nights = carbonFootprint / factor;\\n\\t\\t\\tcarbonFootprint %= factor;\\n\\n\\t\\t\\tuint256 _total = carbonFootprint;\\n\\n\\t\\t\\ts_lastReturns = new uint256[](3);\\n\\t\\t\\ts_lastReturns[0] = _distance;\\n\\t\\t\\ts_lastReturns[1] = _nights;\\n\\t\\t\\ts_lastReturns[2] = _total;\\n\\n\\t\\t\\ts_lastResponse = response;\\n\\t\\t\\ts_lastError = err;\\n\\n\\t\\t\\temit CarbonFootprintCalculated(\\n\\t\\t\\t\\trequestId,\\n\\t\\t\\t\\ts_lastFlag,\\n\\t\\t\\t\\ts_lastArgs,\\n\\t\\t\\t\\ts_lastReturns,\\n\\t\\t\\t\\ts_lastBuyer\\n\\t\\t\\t);\\n\\t\\t} else if (response.length > 0 && equal(s_lastFlag, 'grocery')) {\\n\\t\\t\\tuint256 carbonFootprint = abi.decode(response, (uint256));\\n\\t\\t\\tuint256 factor = 10 ** 18;\\n\\n\\t\\t\\tuint256 _proteins = carbonFootprint / (factor * factor * factor);\\n\\t\\t\\tcarbonFootprint %= (factor * factor * factor);\\n\\n\\t\\t\\tuint256 _fats = carbonFootprint / (factor * factor);\\n\\t\\t\\tcarbonFootprint %= (factor * factor);\\n\\n\\t\\t\\tuint256 _carbs = carbonFootprint / factor;\\n\\t\\t\\tcarbonFootprint %= factor;\\n\\n\\t\\t\\tuint256 _total = carbonFootprint;\\n\\n\\t\\t\\ts_lastReturns = new uint256[](4);\\n\\t\\t\\ts_lastReturns[0] = _proteins;\\n\\t\\t\\ts_lastReturns[1] = _fats;\\n\\t\\t\\ts_lastReturns[2] = _carbs;\\n\\t\\t\\ts_lastReturns[3] = _total;\\n\\n\\t\\t\\temit CarbonFootprintCalculated(\\n\\t\\t\\t\\trequestId,\\n\\t\\t\\t\\ts_lastFlag,\\n\\t\\t\\t\\ts_lastArgs,\\n\\t\\t\\t\\ts_lastReturns,\\n\\t\\t\\t\\ts_lastBuyer\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\temit Response(requestId, s_lastResponse, s_lastError);\\n\\t}\\n}\\n\",\"keccak256\":\"0xe374f2d3c95ca2f60a5cbe9abdfdbe2f9ea76d06d00cf4c361e09c49362c7a86\",\"license\":\"MIT\"},\"contracts/Carbon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\nimport './Calculator.sol';\\nimport './Certificate.sol';\\n\\nimport './enums/enums.sol';\\nimport './interfaces/ILinkToken.sol';\\nimport './interfaces/ICertificate.sol';\\nimport './interfaces/IPUSHCommInterface.sol';\\nimport './interfaces/ITCO2Faucet.sol';\\nimport './interfaces/ITCO2Token.sol';\\nimport './helpers/helpers.sol';\\n\\nimport {Grocery, Travel} from './variables/structs/structs.sol';\\n\\ncontract Carbon is ERC20, ERC20Burnable, Ownable, Helpers {\\n\\tusing Strings for address;\\n\\tusing Strings for string;\\n\\tusing Strings for uint;\\n\\n\\tITCO2Faucet public TCO2FaucetExtense;\\n\\tITCO2Token public TCO2TokenExtense;\\n\\n\\taddress public EPNS_COMM_ADDRESS;\\n\\taddress public LINK_TOKEN_ADDRESS;\\n\\taddress public CARBON_CERTIFICATE_ADDRESS;\\n\\taddress public CARBON_CALCULATOR_ADDRESS;\\n\\n\\tuint256 public TCO2TokensInContract;\\n\\tuint256 public carbonTokensMinted;\\n\\n\\tmapping(bytes32 => Travel) public travelRequests;\\n\\tmapping(bytes32 => Grocery) public groceryRequests;\\n\\n\\tevent BougthCarbonCredits(address indexed buyer, uint256 amount);\\n\\n\\tevent RetiredCarbonCredits(\\n\\t\\taddress indexed buyer,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 certificateId\\n\\t);\\n\\n\\tevent GroceryCarbonFootprintOffset(\\n\\t\\tbytes32 indexed requestId,\\n\\t\\tstring moneySpentProteins,\\n\\t\\tstring moneySpentFats,\\n\\t\\tstring moneySpentCarbs,\\n\\t\\tuint256 proteinsEmission,\\n\\t\\tuint256 fatsEmission,\\n\\t\\tuint256 carbsEmission,\\n\\t\\tuint256 foodEmission,\\n\\t\\taddress buyer\\n\\t);\\n\\n\\tevent TravelCarbonFootprintOffset(\\n\\t\\tbytes32 indexed requestId,\\n\\t\\tstring distance,\\n\\t\\tstring nights,\\n\\t\\tuint256 flightEmission,\\n\\t\\tuint256 hotelEmission,\\n\\t\\tuint256 travelEmission,\\n\\t\\taddress buyer\\n\\t);\\n\\n\\tconstructor(\\n\\t\\taddress _TCO2Faucet,\\n\\t\\taddress _TCO2Token,\\n\\t\\taddress _EPNS_COMM_ADDRESS,\\n\\t\\taddress _LINK_TOKEN_ADDRESS,\\n\\t\\tstring[] memory _certificateArgs,\\n\\t\\taddress[] memory _calculatorArgs\\n\\t) ERC20('carbon', 'CARBON') Ownable(msg.sender) {\\n\\t\\trequire(\\n\\t\\t\\t_certificateArgs.length == 3,\\n\\t\\t\\t'_certificateArgs should be of length 3'\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\t_calculatorArgs.length == 1,\\n\\t\\t\\t'_calculatorArgs should be of length 1'\\n\\t\\t);\\n\\n\\t\\tTCO2FaucetExtense = ITCO2Faucet(_TCO2Faucet);\\n\\t\\tTCO2TokenExtense = ITCO2Token(_TCO2Token);\\n\\n\\t\\tEPNS_COMM_ADDRESS = _EPNS_COMM_ADDRESS;\\n\\t\\tLINK_TOKEN_ADDRESS = _LINK_TOKEN_ADDRESS;\\n\\n\\t\\tCertificate certificate = new Certificate(\\n\\t\\t\\t_certificateArgs[uint(certificateArgs.name)],\\n\\t\\t\\t_certificateArgs[uint(certificateArgs.symbol)],\\n\\t\\t\\t_certificateArgs[uint(certificateArgs.baseURI)]\\n\\t\\t);\\n\\n\\t\\tCalculator calculator = new Calculator(\\n\\t\\t\\t_calculatorArgs[uint(calculatorArgs.router)]\\n\\t\\t);\\n\\n\\t\\tCARBON_CERTIFICATE_ADDRESS = address(certificate);\\n\\t\\tCARBON_CALCULATOR_ADDRESS = address(calculator);\\n\\n\\t\\tILinkTokenInterface(_LINK_TOKEN_ADDRESS).approve(\\n\\t\\t\\taddress(calculator),\\n\\t\\t\\ttype(uint256).max\\n\\t\\t);\\n\\t}\\n\\n\\treceive() external payable {}\\n\\n\\tfunction buyCarbonCredits(address _buyer, uint256 _amount) public onlyOwner {\\n\\t\\trequire(_amount > 0, 'Amount should be greater than 0');\\n\\n\\t\\tuint256 totalCarbonAfterMint = carbonTokensMinted + _amount;\\n\\t\\tif (TCO2TokensInContract < totalCarbonAfterMint) {\\n\\t\\t\\tuint256 amountToWithdraw = totalCarbonAfterMint - TCO2TokensInContract;\\n\\t\\t\\tTCO2FaucetExtense.withdraw(address(TCO2TokenExtense), amountToWithdraw);\\n\\t\\t\\tTCO2TokensInContract += amountToWithdraw;\\n\\t\\t}\\n\\n\\t\\t_mint(_buyer, _amount);\\n\\t\\tcarbonTokensMinted += _amount;\\n\\n\\t\\tIPUSHCommInterface(EPNS_COMM_ADDRESS).sendNotification(\\n\\t\\t\\t0xaA7880DB88D8e051428b5204817e58D8327340De, // from channel\\n\\t\\t\\t_buyer,\\n\\t\\t\\tbytes(\\n\\t\\t\\t\\tstring(\\n\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t'0',\\n\\t\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t\\t'3',\\n\\t\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t\\t'Congrats!',\\n\\t\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t\\t'You just bought ',\\n\\t\\t\\t\\t\\t\\t(_amount / (10 ** uint(decimals()))).toString(),\\n\\t\\t\\t\\t\\t\\t' CARBON!'\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\temit BougthCarbonCredits(_buyer, _amount);\\n\\t}\\n\\n\\tfunction retireCarbonCredits(\\n\\t\\taddress _buyer,\\n\\t\\tuint256 _amount\\n\\t) public onlyOwner {\\n\\t\\trequire(_amount > 0, 'Amount should be greater than 0');\\n\\t\\trequire(_amount <= balanceOf(_buyer), 'Insufficient CARBON tokens');\\n\\n\\t\\tif (TCO2TokensInContract >= _amount) {\\n\\t\\t\\tTCO2TokenExtense.retire(_amount);\\n\\t\\t\\tTCO2TokensInContract -= _amount;\\n\\t\\t} else {\\n\\t\\t\\tuint256 amountFromOwner = _amount - TCO2TokensInContract;\\n\\t\\t\\tTCO2FaucetExtense.withdraw(address(TCO2TokenExtense), amountFromOwner);\\n\\t\\t\\tTCO2TokenExtense.retire(_amount);\\n\\t\\t\\tTCO2TokensInContract = 0;\\n\\t\\t}\\n\\n\\t\\tcarbonTokensMinted -= _amount;\\n\\t\\tburn(_amount);\\n\\n\\t\\tuint256 certificateId = ICertficate(CARBON_CERTIFICATE_ADDRESS).safeMint(\\n\\t\\t\\t_buyer\\n\\t\\t);\\n\\n\\t\\tIPUSHCommInterface(EPNS_COMM_ADDRESS).sendNotification(\\n\\t\\t\\t0xaA7880DB88D8e051428b5204817e58D8327340De, // from channel\\n\\t\\t\\t_buyer,\\n\\t\\t\\tbytes(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t'0',\\n\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t'3',\\n\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t'Congrats!',\\n\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t'You just received an offset certificate! ',\\n\\t\\t\\t\\t\\t'Your offset was ',\\n\\t\\t\\t\\t\\t(_amount / (10 ** uint(decimals()))).toString(),\\n\\t\\t\\t\\t\\t' CO2 Tons'\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\temit RetiredCarbonCredits(_buyer, _amount, certificateId);\\n\\t}\\n\\n\\tfunction offsetCarbonFootprint(\\n\\t\\tbytes32 _requestId,\\n\\t\\tstring calldata _flag,\\n\\t\\tstring[] calldata _args,\\n\\t\\tuint256[] calldata _returns,\\n\\t\\taddress _buyer\\n\\t) external onlyOwner {\\n\\t\\tif (equal(_flag, 'travel')) {\\n\\t\\t\\tTravel memory travel = Travel(\\n\\t\\t\\t\\t_args[uint(travelArgs.distance)],\\n\\t\\t\\t\\t_args[uint(travelArgs.nights)],\\n\\t\\t\\t\\t_returns[uint(travelReturns.flightEmission)],\\n\\t\\t\\t\\t_returns[uint(travelReturns.hotelEmission)],\\n\\t\\t\\t\\t_returns[uint(travelReturns.travelEmission)],\\n\\t\\t\\t\\t_buyer\\n\\t\\t\\t);\\n\\n\\t\\t\\ttravelRequests[_requestId] = travel;\\n\\n\\t\\t\\tbuyCarbonCredits(travel.buyer, travel.travelEmission);\\n\\t\\t\\tretireCarbonCredits(travel.buyer, travel.travelEmission);\\n\\n\\t\\t\\temit TravelCarbonFootprintOffset(\\n\\t\\t\\t\\t_requestId,\\n\\t\\t\\t\\ttravel.distance,\\n\\t\\t\\t\\ttravel.nights,\\n\\t\\t\\t\\ttravel.flightEmission,\\n\\t\\t\\t\\ttravel.hotelEmission,\\n\\t\\t\\t\\ttravel.travelEmission,\\n\\t\\t\\t\\ttravel.buyer\\n\\t\\t\\t);\\n\\n\\t\\t\\treturn;\\n\\t\\t} else if (equal(_flag, 'grocery')) {\\n\\t\\t\\tGrocery memory grocery = Grocery(\\n\\t\\t\\t\\t_args[uint(groceryArgs.moneySpentProteins)],\\n\\t\\t\\t\\t_args[uint(groceryArgs.moneySpentFats)],\\n\\t\\t\\t\\t_args[uint(groceryArgs.moneySpentCarbs)],\\n\\t\\t\\t\\t_returns[uint(groceryReturns.proteinsEmission)],\\n\\t\\t\\t\\t_returns[uint(groceryReturns.fatsEmission)],\\n\\t\\t\\t\\t_returns[uint(groceryReturns.carbsEmission)],\\n\\t\\t\\t\\t_returns[uint(groceryReturns.foodEmission)],\\n\\t\\t\\t\\t_buyer\\n\\t\\t\\t);\\n\\n\\t\\t\\tgroceryRequests[_requestId] = grocery;\\n\\n\\t\\t\\tbuyCarbonCredits(grocery.buyer, grocery.foodEmission);\\n\\t\\t\\tretireCarbonCredits(grocery.buyer, grocery.foodEmission);\\n\\n\\t\\t\\temit GroceryCarbonFootprintOffset(\\n\\t\\t\\t\\t_requestId,\\n\\t\\t\\t\\tgrocery.moneySpentProteins,\\n\\t\\t\\t\\tgrocery.moneySpentFats,\\n\\t\\t\\t\\tgrocery.moneySpentCarbs,\\n\\t\\t\\t\\tgrocery.proteinsEmission,\\n\\t\\t\\t\\tgrocery.fatsEmission,\\n\\t\\t\\t\\tgrocery.carbsEmission,\\n\\t\\t\\t\\tgrocery.foodEmission,\\n\\t\\t\\t\\tgrocery.buyer\\n\\t\\t\\t);\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\trevert('Invalid flag');\\n\\t}\\n\\n\\tfunction withdrawTCO2Tokens() public onlyOwner {\\n\\t\\tuint256 amount = TCO2TokenExtense.balanceOf(address(this));\\n\\t\\trequire(TCO2TokenExtense.transfer(msg.sender, amount), 'Transfer failed');\\n\\t}\\n\\n\\tfunction withdrawFunds() public onlyOwner {\\n\\t\\t(bool response /*bytes memory data*/, ) = msg.sender.call{\\n\\t\\t\\tvalue: address(this).balance\\n\\t\\t}('');\\n\\t\\trequire(response, 'Transfer failed');\\n\\t}\\n\\n\\tfunction transfer(\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) public virtual override returns (bool) {\\n\\t\\taddress owner = _msgSender();\\n\\t\\t_transfer(owner, to, amount);\\n\\n\\t\\tIPUSHCommInterface(EPNS_COMM_ADDRESS).sendNotification(\\n\\t\\t\\t0xaA7880DB88D8e051428b5204817e58D8327340De, // from channel\\n\\t\\t\\tto,\\n\\t\\t\\tbytes(\\n\\t\\t\\t\\tstring(\\n\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t'0',\\n\\t\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t\\t'3',\\n\\t\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t\\t'Congrats!',\\n\\t\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t\\towner.toHexString(),\\n\\t\\t\\t\\t\\t\\t' transferred ',\\n\\t\\t\\t\\t\\t\\t(amount / (10 ** uint(decimals()))).toString(),\\n\\t\\t\\t\\t\\t\\t' CARBON to you!'\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) public virtual override returns (bool) {\\n\\t\\taddress spender = _msgSender();\\n\\t\\t_spendAllowance(from, spender, amount);\\n\\t\\t_transfer(from, to, amount);\\n\\n\\t\\tIPUSHCommInterface(EPNS_COMM_ADDRESS).sendNotification(\\n\\t\\t\\t0xaA7880DB88D8e051428b5204817e58D8327340De,\\n\\t\\t\\tto,\\n\\t\\t\\tbytes(\\n\\t\\t\\t\\tstring(\\n\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t'0',\\n\\t\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t\\t'3',\\n\\t\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t\\t'Congrats!',\\n\\t\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t\\tspender.toHexString(),\\n\\t\\t\\t\\t\\t\\t' transferred ',\\n\\t\\t\\t\\t\\t\\t(amount / (10 ** uint(decimals()))).toString(),\\n\\t\\t\\t\\t\\t\\t' CARBON to you!'\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\treturn true;\\n\\t}\\n}\\n\",\"keccak256\":\"0x9335b0b8828138f56d778fc4a3719772376f98cd90b96ecc2a8c991697e0e623\",\"license\":\"MIT\"},\"contracts/Certificate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\n\\ncontract Certificate is ERC721, Ownable {\\n\\tuint256 public tokenIdCounter;\\n\\tstring baseURI;\\n\\n\\tconstructor(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tstring memory _baseURI\\n\\t) ERC721(_name, _symbol) Ownable(msg.sender) {\\n\\t\\tbaseURI = _baseURI;\\n\\t}\\n\\n\\tfunction safeMint(address _to) public onlyOwner returns (uint256) {\\n\\t\\tuint256 tokenId = tokenIdCounter;\\n\\t\\ttokenIdCounter++;\\n\\n\\t\\t_safeMint(_to, tokenId);\\n\\t\\treturn tokenId;\\n\\t}\\n\\n\\tfunction approve(address, uint256) public pure override {\\n\\t\\trevert(\\\"Approve isn't allowed\\\");\\n\\t}\\n\\n\\tfunction setApprovalForAll(address, bool) public pure override {\\n\\t\\trevert(\\\"setApprovalForAll isn't allowed\\\");\\n\\t}\\n\\n\\tfunction transferFrom(address, address, uint256) public pure override {\\n\\t\\trevert(\\\"transferFrom isn't allowed\\\");\\n\\t}\\n\\n\\tfunction safeTransferFrom(\\n\\t\\taddress,\\n\\t\\taddress,\\n\\t\\tuint256,\\n\\t\\tbytes memory\\n\\t) public pure override {\\n\\t\\trevert(\\\"safeTransferFrom isn't allowed\\\");\\n\\t}\\n\\n\\tfunction tokenURI(\\n\\t\\tuint256 tokenId\\n\\t) public view override returns (string memory) {\\n\\t\\t_requireOwned(tokenId);\\n\\n\\t\\treturn baseURI;\\n\\t}\\n}\\n\",\"keccak256\":\"0xd83103549e6fadaba36ab5687761ff4fe8abaa47d76ce13aec4253bf8475f3d8\",\"license\":\"MIT\"},\"contracts/enums/enums.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nenum calculatorArgs {\\n\\trouter\\n}\\n\\nenum certificateArgs {\\n\\tname,\\n\\tsymbol,\\n\\tbaseURI\\n}\\n\\nenum groceryArgs {\\n\\tmoneySpentProteins,\\n\\tmoneySpentFats,\\n\\tmoneySpentCarbs\\n}\\n\\nenum sendRequestStringArgs {\\n\\tflag,\\n\\tsource\\n}\\n\\nenum travelArgs {\\n\\tdistance,\\n\\tnights\\n}\\n\\nenum groceryReturns {\\n\\tproteinsEmission,\\n\\tfatsEmission,\\n\\tcarbsEmission,\\n\\tfoodEmission\\n}\\n\\nenum travelReturns {\\n\\tflightEmission,\\n\\thotelEmission,\\n\\ttravelEmission\\n}\\n\",\"keccak256\":\"0xabbf9fd095217f87d1c56f53f34256e9a18b8c145396873ce17eebcd848179b7\",\"license\":\"MIT\"},\"contracts/helpers/helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ncontract Helpers {\\n\\tfunction equal(\\n\\t\\tstring memory _a,\\n\\t\\tstring memory _b\\n\\t) internal pure returns (bool) {\\n\\t\\treturn keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\n\\t}\\n}\\n\",\"keccak256\":\"0xb8ea8be969ed15f725a3b78e6ce28f51cade65f45228754f6bca141eec18f281\",\"license\":\"MIT\"},\"contracts/interfaces/ICertificate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\n\\ninterface ICertficate is IERC721, IERC721Metadata {\\n\\tfunction safeMint(address to) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x7feae02b88fa95ad9b138ab6228852fae768c8f335446ed32676402b75ef8c60\",\"license\":\"MIT\"},\"contracts/interfaces/ILinkToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface ILinkTokenInterface is IERC20 {}\\n\",\"keccak256\":\"0x8d7bcaa20306500cc9cc39889da7a95e2aaea16abba5a80b8cc2e2407b4b697b\",\"license\":\"MIT\"},\"contracts/interfaces/IPUSHCommInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// PUSH Comm Contract Interface\\ninterface IPUSHCommInterface {\\n\\tfunction sendNotification(\\n\\t\\taddress _channel,\\n\\t\\taddress _recipient,\\n\\t\\tbytes calldata _identity\\n\\t) external;\\n}\\n\",\"keccak256\":\"0xf979e927a870830d182df45e2b1545520d7781c0e2012738b115a709b1b9e95a\",\"license\":\"MIT\"},\"contracts/interfaces/ITCO2Faucet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * Network: Mumbai\\n * name: TCO2Faucet\\n * Address: 0x996b39698CF96A70B7a7005B5d1924a66C5E8f0e\\n **/\\n\\ninterface ITCO2Faucet {\\n\\tfunction withdraw(address _erc20Address, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb454d819194ae4db1cec5e610b9d8a76e9dd1fa8c25a2e14f69467f41e9b4a3f\",\"license\":\"MIT\"},\"contracts/interfaces/ITCO2Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * Network: Mumbai\\n * name: TCO2Token\\n * Address: 0xa5831eb637dff307395b5183c86B04c69C518681\\n **/\\n\\ninterface ITCO2Token is IERC20 {\\n\\tfunction retire(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x0dd5a335d7039bb3a0dbe6392dfea5c91811483937f9e995fc4aedd10cdde398\",\"license\":\"MIT\"},\"contracts/variables/structs/structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nstruct Travel {\\n\\tstring distance;\\n\\tstring nights;\\n\\tuint256 flightEmission;\\n\\tuint256 hotelEmission;\\n\\tuint256 travelEmission;\\n\\taddress buyer;\\n}\\n\\nstruct Grocery {\\n\\tstring moneySpentProteins;\\n\\tstring moneySpentFats;\\n\\tstring moneySpentCarbs;\\n\\tuint256 proteinsEmission;\\n\\tuint256 fatsEmission;\\n\\tuint256 carbsEmission;\\n\\tuint256 foodEmission;\\n\\taddress buyer;\\n}\\n\",\"keccak256\":\"0x97fa0e8d34bee52442dee67ad10750a888415c6100a6fc594d8b0e1015d261af\",\"license\":\"MIT\"}},\"version\":1}",
	"bytecode": "0x60806040523480156200001157600080fd5b50604051620068d6380380620068d6833981016040819052620000349162000541565b336040518060400160405280600681526020016531b0b93137b760d11b8152506040518060400160405280600681526020016521a0a92127a760d11b815250816003908162000084919062000775565b50600462000093828262000775565b5050506001600160a01b038116620000c657604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b620000d181620003a5565b508151600314620001345760405162461bcd60e51b815260206004820152602660248201527f5f6365727469666963617465417267732073686f756c64206265206f66206c656044820152656e677468203360d01b6064820152608401620000bd565b8051600114620001955760405162461bcd60e51b815260206004820152602560248201527f5f63616c63756c61746f72417267732073686f756c64206265206f66206c656e604482015264677468203160d81b6064820152608401620000bd565b600680546001600160a01b038089166001600160a01b031992831617909255600780548884169083161790556008805487841690831617905560098054928616929091169190911790556000828181518110620001f657620001f662000857565b6020026020010151836001600281111562000215576200021562000841565b8151811062000228576200022862000857565b60200260200101518460028081111562000246576200024662000841565b8151811062000259576200025962000857565b60200260200101516040516200026f90620003f7565b6200027d939291906200089b565b604051809103906000f0801580156200029a573d6000803e3d6000fd5b5090506000828181518110620002b457620002b462000857565b6020026020010151604051620002ca9062000405565b6001600160a01b039091168152602001604051809103906000f080158015620002f7573d6000803e3d6000fd5b50600a80546001600160a01b038581166001600160a01b031992831617909255600b805484841692168217905560405163095ea7b360e01b81526004810191909152600019602482015291925086169063095ea7b3906044016020604051808303816000875af115801562000370573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003969190620008e4565b5050505050505050506200090f565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611323806200331983390190565b61229a806200463c83390190565b80516001600160a01b03811681146200042b57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562000471576200047162000430565b604052919050565b60006001600160401b0382111562000495576200049562000430565b5060051b60200190565b60005b83811015620004bc578181015183820152602001620004a2565b50506000910152565b600082601f830112620004d757600080fd5b81516020620004f0620004ea8362000479565b62000446565b82815260059290921b840181019181810190868411156200051057600080fd5b8286015b848110156200053657620005288162000413565b835291830191830162000514565b509695505050505050565b60008060008060008060c087890312156200055b57600080fd5b620005668762000413565b9550620005766020880162000413565b9450620005866040880162000413565b9350620005966060880162000413565b60808801519093506001600160401b03811115620005b357600080fd5b8701601f81018913620005c557600080fd5b8051620005d6620004ea8262000479565b808282526020820191508b60208460051b8601011115620005f657600080fd5b602084015b60208460051b860101811015620006a95780516001600160401b038111156200062357600080fd5b8d603f82880101126200063557600080fd5b858101602001516001600160401b0381111562000656576200065662000430565b6200066b601f8201601f191660200162000446565b8181528f604083858b01010111156200068357600080fd5b6200069882602083016040868c01016200049f565b8552505060209283019201620005fb565b5060a08b0151909550925050506001600160401b03811115620006cb57600080fd5b620006d989828a01620004c5565b9150509295509295509295565b600181811c90821680620006fb57607f821691505b6020821081036200071c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200077057600081815260208120601f850160051c810160208610156200074b5750805b601f850160051c820191505b818110156200076c5782815560010162000757565b5050505b505050565b81516001600160401b0381111562000791576200079162000430565b620007a981620007a28454620006e6565b8462000722565b602080601f831160018114620007e15760008415620007c85750858301515b600019600386901b1c1916600185901b1785556200076c565b600085815260208120601f198616915b828110156200081257888601518255948401946001909101908401620007f1565b5085821015620008315787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008151808452620008878160208601602086016200049f565b601f01601f19169290920160200192915050565b606081526000620008b060608301866200086d565b8281036020840152620008c481866200086d565b90508281036040840152620008da81856200086d565b9695505050505050565b600060208284031215620008f757600080fd5b815180151581146200090857600080fd5b9392505050565b6129fa806200091f6000396000f3fe6080604052600436106101c65760003560e01c806379cc6790116100f7578063a9059cbb11610095578063dd62ed3e11610064578063dd62ed3e14610518578063e6cf1f2d1461055e578063e75ad1151461057e578063f2fde38b1461059e57600080fd5b8063a9059cbb146104ac578063abc3e88b146104cc578063c37964bd146104ec578063d8f1d7241461050257600080fd5b80638a5b44b3116100d15780638a5b44b3146104445780638da5cb5b1461045957806391a89a291461047757806395d89b411461049757600080fd5b806379cc6790146103d05780637f092484146103f0578063839e19d91461041057600080fd5b806324600fc31161016457806348a3b4a41161013e57806348a3b4a4146103455780634da2d12a1461036557806370a0823114610385578063715018a6146103bb57600080fd5b806324600fc3146102f2578063313ce5671461030957806342966c681461032557600080fd5b806314444130116101a0578063144441301461026157806318160ddd1461029357806322a0bb6b146102b257806323b872dd146102d257600080fd5b806302598e0a146101d257806306fdde031461020f578063095ea7b31461023157600080fd5b366101cd57005b600080fd5b3480156101de57600080fd5b506009546101f2906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561021b57600080fd5b506102246105be565b604051610206919061211d565b34801561023d57600080fd5b5061025161024c366004612153565b610650565b6040519015158152602001610206565b34801561026d57600080fd5b5061028161027c36600461217d565b61066a565b60405161020696959493929190612196565b34801561029f57600080fd5b506002545b604051908152602001610206565b3480156102be57600080fd5b506007546101f2906001600160a01b031681565b3480156102de57600080fd5b506102516102ed3660046121ea565b6107b8565b3480156102fe57600080fd5b506103076108a7565b005b34801561031557600080fd5b5060405160128152602001610206565b34801561033157600080fd5b5061030761034036600461217d565b610941565b34801561035157600080fd5b506008546101f2906001600160a01b031681565b34801561037157600080fd5b50600b546101f2906001600160a01b031681565b34801561039157600080fd5b506102a46103a0366004612226565b6001600160a01b031660009081526020819052604090205490565b3480156103c757600080fd5b5061030761094b565b3480156103dc57600080fd5b506103076103eb366004612153565b61095f565b3480156103fc57600080fd5b50600a546101f2906001600160a01b031681565b34801561041c57600080fd5b5061043061042b36600461217d565b610978565b604051610206989796959493929190612241565b34801561045057600080fd5b50610307610b5a565b34801561046557600080fd5b506005546001600160a01b03166101f2565b34801561048357600080fd5b506006546101f2906001600160a01b031681565b3480156104a357600080fd5b50610224610c83565b3480156104b857600080fd5b506102516104c7366004612153565b610c92565b3480156104d857600080fd5b506103076104e7366004612153565b610d5c565b3480156104f857600080fd5b506102a4600d5481565b34801561050e57600080fd5b506102a4600c5481565b34801561052457600080fd5b506102a46105333660046122b2565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561056a57600080fd5b50610307610579366004612331565b611112565b34801561058a57600080fd5b50610307610599366004612153565b61175c565b3480156105aa57600080fd5b506103076105b9366004612226565b61195f565b6060600380546105cd90612413565b80601f01602080910402602001604051908101604052809291908181526020018280546105f990612413565b80156106465780601f1061061b57610100808354040283529160200191610646565b820191906000526020600020905b81548152906001019060200180831161062957829003601f168201915b5050505050905090565b60003361065e81858561199a565b60019150505b92915050565b600e6020526000908152604090208054819061068590612413565b80601f01602080910402602001604051908101604052809291908181526020018280546106b190612413565b80156106fe5780601f106106d3576101008083540402835291602001916106fe565b820191906000526020600020905b8154815290600101906020018083116106e157829003601f168201915b50505050509080600101805461071390612413565b80601f016020809104026020016040519081016040528092919081815260200182805461073f90612413565b801561078c5780601f106107615761010080835404028352916020019161078c565b820191906000526020600020905b81548152906001019060200180831161076f57829003601f168201915b50505050600283015460038401546004850154600590950154939491939092506001600160a01b031686565b6000336107c68582856119ac565b6107d1858585611a2a565b6008546001600160a01b039081169063ba3d69d79073aa7880db88d8e051428b5204817e58d8327340de908790610809908616611a89565b61082c60125b61081d9060ff16600a612547565b610827908a612553565b611a9f565b60405160200161083d929190612575565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161086a9392919061261a565b600060405180830381600087803b15801561088457600080fd5b505af1158015610898573d6000803e3d6000fd5b50600198975050505050505050565b6108af611b32565b604051600090339047908381818185875af1925050503d80600081146108f1576040519150601f19603f3d011682016040523d82523d6000602084013e6108f6565b606091505b505090508061093e5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064015b60405180910390fd5b50565b61093e3382611b5f565b610953611b32565b61095d6000611b95565b565b61096a8233836119ac565b6109748282611b5f565b5050565b600f6020526000908152604090208054819061099390612413565b80601f01602080910402602001604051908101604052809291908181526020018280546109bf90612413565b8015610a0c5780601f106109e157610100808354040283529160200191610a0c565b820191906000526020600020905b8154815290600101906020018083116109ef57829003601f168201915b505050505090806001018054610a2190612413565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4d90612413565b8015610a9a5780601f10610a6f57610100808354040283529160200191610a9a565b820191906000526020600020905b815481529060010190602001808311610a7d57829003601f168201915b505050505090806002018054610aaf90612413565b80601f0160208091040260200160405190810160405280929190818152602001828054610adb90612413565b8015610b285780601f10610afd57610100808354040283529160200191610b28565b820191906000526020600020905b815481529060010190602001808311610b0b57829003601f168201915b50505060038401546004850154600586015460068701546007909701549596929591945092506001600160a01b031688565b610b62611b32565b6007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcf919061264f565b60075460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c459190612668565b61093e5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610935565b6060600480546105cd90612413565b600033610ca0818585611a2a565b6008546001600160a01b039081169063ba3d69d79073aa7880db88d8e051428b5204817e58d8327340de908790610cd8908616611a89565b610ce2601261080f565b604051602001610cf3929190612575565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401610d209392919061261a565b600060405180830381600087803b158015610d3a57600080fd5b505af1158015610d4e573d6000803e3d6000fd5b506001979650505050505050565b610d64611b32565b60008111610db45760405162461bcd60e51b815260206004820152601f60248201527f416d6f756e742073686f756c642062652067726561746572207468616e2030006044820152606401610935565b6001600160a01b038216600090815260208190526040902054811115610e1c5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420434152424f4e20746f6b656e730000000000006044820152606401610935565b80600c5410610ea057600754604051633790cf5760e01b8152600481018390526001600160a01b0390911690633790cf5790602401600060405180830381600087803b158015610e6b57600080fd5b505af1158015610e7f573d6000803e3d6000fd5b5050505080600c6000828254610e95919061268a565b90915550610f7f9050565b6000600c5482610eb0919061268a565b60065460075460405163f3fef3a360e01b81526001600160a01b03918216600482015260248101849052929350169063f3fef3a390604401600060405180830381600087803b158015610f0257600080fd5b505af1158015610f16573d6000803e3d6000fd5b5050600754604051633790cf5760e01b8152600481018690526001600160a01b039091169250633790cf579150602401600060405180830381600087803b158015610f6057600080fd5b505af1158015610f74573d6000803e3d6000fd5b50506000600c555050505b80600d6000828254610f91919061268a565b90915550610fa0905081610941565b600a546040516340d097c360e01b81526001600160a01b03848116600483015260009216906340d097c3906024016020604051808303816000875af1158015610fed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611011919061264f565b6008549091506001600160a01b031663ba3d69d773aa7880db88d8e051428b5204817e58d8327340de8561105960125b61104f9060ff16600a612547565b6108279088612553565b604051602001611069919061269d565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016110969392919061261a565b600060405180830381600087803b1580156110b057600080fd5b505af11580156110c4573d6000803e3d6000fd5b505060408051858152602081018590526001600160a01b03871693507fd01c6570076b5796ea5b39d13cb939955b5d2ec43f5ba7ee52e6cd5613823aad9250015b60405180910390a2505050565b61111a611b32565b61117787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820190915260068152651d1c985d995b60d21b60208201529150611be79050565b156113cb576040805160c081019091526000908087878481811061119d5761119d61275e565b90506020028101906111af9190612774565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001878760018181106111fc576111fc61275e565b905060200281019061120e9190612774565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050602090920191508690869081811061125d5761125d61275e565b60209081029290920135835250018585600181811061127e5761127e61275e565b60209081029290920135835250018585600281811061129f5761129f61275e565b905060200201358152602001836001600160a01b0316815250905080600e60008b815260200190815260200160002060008201518160000190816112e3919061281f565b50602082015160018201906112f8908261281f565b5060408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b031602179055509050506113598160a00151826080015161175c565b61136b8160a001518260800151610d5c565b887f7c81b460a6b12a2e4a87588702b99415c687cce28884559cc2d0fd1947d16817826000015183602001518460400151856060015186608001518760a001516040516113bd96959493929190612196565b60405180910390a250611752565b61142987878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152600781526667726f6365727960c81b60208201529150611be79050565b1561171b57604080516101008101909152600090808787848181106114505761145061275e565b90506020028101906114629190612774565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001878760018181106114af576114af61275e565b90506020028101906114c19190612774565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020018787600281811061150e5761150e61275e565b90506020028101906115209190612774565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050602090920191508690869081811061156f5761156f61275e565b6020908102929092013583525001858560018181106115905761159061275e565b6020908102929092013583525001858560028181106115b1576115b161275e565b6020908102929092013583525001858560038181106115d2576115d261275e565b905060200201358152602001836001600160a01b0316815250905080600f60008b81526020019081526020016000206000820151816000019081611616919061281f565b506020820151600182019061162b908261281f565b5060408201516002820190611640908261281f565b50606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a8154816001600160a01b0302191690836001600160a01b031602179055509050506116ab8160e001518260c0015161175c565b6116bd8160e001518260c00151610d5c565b887fbd10a9db6369936f36a7ea3c03e87509cf540e7505da28668ee8d80ce52ea30d826000015183602001518460400151856060015186608001518760a001518860c001518960e001516040516113bd989796959493929190612241565b60405162461bcd60e51b815260206004820152600c60248201526b496e76616c696420666c616760a01b6044820152606401610935565b5050505050505050565b611764611b32565b600081116117b45760405162461bcd60e51b815260206004820152601f60248201527f416d6f756e742073686f756c642062652067726561746572207468616e2030006044820152606401610935565b600081600d546117c491906128df565b905080600c541015611863576000600c54826117e0919061268a565b60065460075460405163f3fef3a360e01b81526001600160a01b03918216600482015260248101849052929350169063f3fef3a390604401600060405180830381600087803b15801561183257600080fd5b505af1158015611846573d6000803e3d6000fd5b5050505080600c600082825461185c91906128df565b9091555050505b61186d8383611c40565b81600d600082825461187f91906128df565b90915550506008546001600160a01b031663ba3d69d773aa7880db88d8e051428b5204817e58d8327340de856118b56012611041565b6040516020016118c591906128f2565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016118f29392919061261a565b600060405180830381600087803b15801561190c57600080fd5b505af1158015611920573d6000803e3d6000fd5b50505050826001600160a01b03167fa46287cd6870c6d05612bb95b96833337e1e8a0ccea8be539c860dee7ac5f6e18360405161110591815260200190565b611967611b32565b6001600160a01b03811661199157604051631e4fbdf760e01b815260006004820152602401610935565b61093e81611b95565b6119a78383836001611c76565b505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114611a245781811015611a1557604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610935565b611a2484848484036000611c76565b50505050565b6001600160a01b038316611a5457604051634b637e8f60e11b815260006004820152602401610935565b6001600160a01b038216611a7e5760405163ec442f0560e01b815260006004820152602401610935565b6119a7838383611d4b565b60606106646001600160a01b0383166014611e75565b60606000611aac83611ff5565b600101905060008167ffffffffffffffff811115611acc57611acc6127bb565b6040519080825280601f01601f191660200182016040528015611af6576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611b0057509392505050565b6005546001600160a01b0316331461095d5760405163118cdaa760e01b8152336004820152602401610935565b6001600160a01b038216611b8957604051634b637e8f60e11b815260006004820152602401610935565b61097482600083611d4b565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081604051602001611bfa919061297a565b6040516020818303038152906040528051906020012083604051602001611c21919061297a565b6040516020818303038152906040528051906020012014905092915050565b6001600160a01b038216611c6a5760405163ec442f0560e01b815260006004820152602401610935565b61097460008383611d4b565b6001600160a01b038416611ca05760405163e602df0560e01b815260006004820152602401610935565b6001600160a01b038316611cca57604051634a1406b160e11b815260006004820152602401610935565b6001600160a01b0380851660009081526001602090815260408083209387168352929052208290558015611a2457826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051611d3d91815260200190565b60405180910390a350505050565b6001600160a01b038316611d76578060026000828254611d6b91906128df565b90915550611de89050565b6001600160a01b03831660009081526020819052604090205481811015611dc95760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610935565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b038216611e0457600280548290039055611e23565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611e6891815260200190565b60405180910390a3505050565b6060826000611e85846002612996565b611e909060026128df565b67ffffffffffffffff811115611ea857611ea86127bb565b6040519080825280601f01601f191660200182016040528015611ed2576020820181803683370190505b509050600360fc1b81600081518110611eed57611eed61275e565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f1c57611f1c61275e565b60200101906001600160f81b031916908160001a9053506000611f40856002612996565b611f4b9060016128df565b90505b6001811115611fc3576f181899199a1a9b1b9c1cb0b131b232b360811b83600f1660108110611f7f57611f7f61275e565b1a60f81b828281518110611f9557611f9561275e565b60200101906001600160f81b031916908160001a90535060049290921c91611fbc816129ad565b9050611f4e565b508115611fed5760405163e22e27eb60e01b81526004810186905260248101859052604401610935565b949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106120345772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612060576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061207e57662386f26fc10000830492506010015b6305f5e1008310612096576305f5e100830492506008015b61271083106120aa57612710830492506004015b606483106120bc576064830492506002015b600a83106106645760010192915050565b60005b838110156120e85781810151838201526020016120d0565b50506000910152565b600081518084526121098160208601602086016120cd565b601f01601f19169290920160200192915050565b60208152600061213060208301846120f1565b9392505050565b80356001600160a01b038116811461214e57600080fd5b919050565b6000806040838503121561216657600080fd5b61216f83612137565b946020939093013593505050565b60006020828403121561218f57600080fd5b5035919050565b60c0815260006121a960c08301896120f1565b82810360208401526121bb81896120f1565b60408401979097525050606081019390935260808301919091526001600160a01b031660a09091015292915050565b6000806000606084860312156121ff57600080fd5b61220884612137565b925061221660208501612137565b9150604084013590509250925092565b60006020828403121561223857600080fd5b61213082612137565b60006101008083526122558184018c6120f1565b90508281036020840152612269818b6120f1565b9050828103604084015261227d818a6120f1565b60608401989098525050608081019490945260a084019290925260c08301526001600160a01b031660e0909101529392505050565b600080604083850312156122c557600080fd5b6122ce83612137565b91506122dc60208401612137565b90509250929050565b60008083601f8401126122f757600080fd5b50813567ffffffffffffffff81111561230f57600080fd5b6020830191508360208260051b850101111561232a57600080fd5b9250929050565b60008060008060008060008060a0898b03121561234d57600080fd5b88359750602089013567ffffffffffffffff8082111561236c57600080fd5b818b0191508b601f83011261238057600080fd5b81358181111561238f57600080fd5b8c60208285010111156123a157600080fd5b6020830199508098505060408b01359150808211156123bf57600080fd5b6123cb8c838d016122e5565b909750955060608b01359150808211156123e457600080fd5b506123f18b828c016122e5565b9094509250612404905060808a01612137565b90509295985092959890939650565b600181811c9082168061242757607f821691505b60208210810361244757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561249e5781600019048211156124845761248461244d565b8085161561249157918102915b93841c9390800290612468565b509250929050565b6000826124b557506001610664565b816124c257506000610664565b81600181146124d857600281146124e2576124fe565b6001915050610664565b60ff8411156124f3576124f361244d565b50506001821b610664565b5060208310610133831016604e8410600b8410161715612521575081810a610664565b61252b8383612463565b806000190482111561253f5761253f61244d565b029392505050565b600061213083836124a6565b60008261257057634e487b7160e01b600052601260045260246000fd5b500490565b600360fc1b81526000602b60f81b806001840152603360f81b600284015280600384015268436f6e67726174732160b81b600484015280600d8401525083516125c581600e8501602088016120cd565b6c0103a3930b739b332b93932b21609d1b600e9184019182015283516125f281601b8401602088016120cd565b6e20434152424f4e20746f20796f752160881b601b9290910191820152602a01949350505050565b6001600160a01b03848116825283166020820152606060408201819052600090612646908301846120f1565b95945050505050565b60006020828403121561266157600080fd5b5051919050565b60006020828403121561267a57600080fd5b8151801515811461213057600080fd5b818103818111156106645761066461244d565b600360fc1b81526000602b60f81b806001840152603360f81b600284015280600384015268436f6e67726174732160b81b600484015280600d840152507f596f75206a75737420726563656976656420616e206f66667365742063657274600e83015268034b334b1b0ba3290960bd1b602e8301526f02cb7bab91037b33339b2ba103bb0b9960851b6037830152825161273e8160478501602087016120cd565b6820434f3220546f6e7360b81b6047939091019283015250605001919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261278b57600080fd5b83018035915067ffffffffffffffff8211156127a657600080fd5b60200191503681900382131561232a57600080fd5b634e487b7160e01b600052604160045260246000fd5b601f8211156119a757600081815260208120601f850160051c810160208610156127f85750805b601f850160051c820191505b8181101561281757828155600101612804565b505050505050565b815167ffffffffffffffff811115612839576128396127bb565b61284d816128478454612413565b846127d1565b602080601f831160018114612882576000841561286a5750858301515b600019600386901b1c1916600185901b178555612817565b600085815260208120601f198616915b828110156128b157888601518255948401946001909101908401612892565b50858210156128cf5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156106645761066461244d565b600360fc1b81526000602b60f81b806001840152603360f81b600284015280600384015268436f6e67726174732160b81b600484015280600d840152506f02cb7ba90353ab9ba103137bab3b43a160851b600e830152825161295b81601e8501602087016120cd565b6720434152424f4e2160c01b601e939091019283015250602601919050565b6000825161298c8184602087016120cd565b9190910192915050565b80820281158282048414176106645761066461244d565b6000816129bc576129bc61244d565b50600019019056fea264697066735822122085b42614247e66e2c889b8cdf56458ba4b63333ab338b101569dd64a12d502f864736f6c6343000814003360806040523480156200001157600080fd5b5060405162001323380380620013238339810160408190526200003491620001c1565b3383836000620000458382620002e1565b506001620000548282620002e1565b5050506001600160a01b0381166200008657604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200009181620000aa565b506008620000a08282620002e1565b50505050620003ad565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200012457600080fd5b81516001600160401b0380821115620001415762000141620000fc565b604051601f8301601f19908116603f011681019082821181831017156200016c576200016c620000fc565b816040528381526020925086838588010111156200018957600080fd5b600091505b83821015620001ad57858201830151818301840152908201906200018e565b600093810190920192909252949350505050565b600080600060608486031215620001d757600080fd5b83516001600160401b0380821115620001ef57600080fd5b620001fd8783880162000112565b945060208601519150808211156200021457600080fd5b620002228783880162000112565b935060408601519150808211156200023957600080fd5b50620002488682870162000112565b9150509250925092565b600181811c908216806200026757607f821691505b6020821081036200028857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002dc57600081815260208120601f850160051c81016020861015620002b75750805b601f850160051c820191505b81811015620002d857828155600101620002c3565b5050505b505050565b81516001600160401b03811115620002fd57620002fd620000fc565b62000315816200030e845462000252565b846200028e565b602080601f8311600181146200034d5760008415620003345750858301515b600019600386901b1c1916600185901b178555620002d8565b600085815260208120601f198616915b828110156200037e578886015182559484019460019091019084016200035d565b50858210156200039d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610f6680620003bd6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063715018a6116100a2578063a22cb46511610071578063a22cb4651461022f578063b88d4fde14610242578063c87b56dd14610255578063e985e9c514610268578063f2fde38b1461027b57600080fd5b8063715018a6146102055780638da5cb5b1461020d57806395d89b411461021e57806398bdf6f51461022657600080fd5b806323b872dd116100e957806323b872dd1461019857806340d097c3146101ab57806342842e0e146101cc5780636352211e146101df57806370a08231146101f257600080fd5b806301ffc9a71461011b57806306fdde0314610143578063081812fc14610158578063095ea7b314610183575b600080fd5b61012e610129366004610be6565b61028e565b60405190151581526020015b60405180910390f35b61014b6102e0565b60405161013a9190610c50565b61016b610166366004610c63565b610372565b6040516001600160a01b03909116815260200161013a565b610196610191366004610c93565b61039b565b005b6101966101a6366004610cbd565b6103e0565b6101be6101b9366004610cf9565b610428565b60405190815260200161013a565b6101966101da366004610cbd565b61045b565b61016b6101ed366004610c63565b61047b565b6101be610200366004610cf9565b610486565b6101966104ce565b6006546001600160a01b031661016b565b61014b6104e2565b6101be60075481565b61019661023d366004610d14565b6104f1565b610196610250366004610d66565b610539565b61014b610263366004610c63565b610581565b61012e610276366004610e42565b61061f565b610196610289366004610cf9565b61064d565b60006001600160e01b031982166380ac58cd60e01b14806102bf57506001600160e01b03198216635b5e139f60e01b145b806102da57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546102ef90610e75565b80601f016020809104026020016040519081016040528092919081815260200182805461031b90610e75565b80156103685780601f1061033d57610100808354040283529160200191610368565b820191906000526020600020905b81548152906001019060200180831161034b57829003601f168201915b5050505050905090565b600061037d8261068b565b506000828152600460205260409020546001600160a01b03166102da565b60405162461bcd60e51b8152602060048201526015602482015274105c1c1c9bdd99481a5cdb89dd08185b1b1bddd959605a1b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601a60248201527f7472616e7366657246726f6d2069736e277420616c6c6f77656400000000000060448201526064016103d7565b60006104326106c4565b60078054908190600061044483610eaf565b919050555061045383826106f1565b90505b919050565b61047683838360405180602001604052806000815250610539565b505050565b60006102da8261068b565b60006001600160a01b0382166104b2576040516322718ad960e21b8152600060048201526024016103d7565b506001600160a01b031660009081526003602052604090205490565b6104d66106c4565b6104e0600061070f565b565b6060600180546102ef90610e75565b60405162461bcd60e51b815260206004820152601f60248201527f736574417070726f76616c466f72416c6c2069736e277420616c6c6f7765640060448201526064016103d7565b60405162461bcd60e51b815260206004820152601e60248201527f736166655472616e7366657246726f6d2069736e277420616c6c6f776564000060448201526064016103d7565b606061058c8261068b565b506008805461059a90610e75565b80601f01602080910402602001604051908101604052809291908181526020018280546105c690610e75565b80156106135780601f106105e857610100808354040283529160200191610613565b820191906000526020600020905b8154815290600101906020018083116105f657829003601f168201915b50505050509050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6106556106c4565b6001600160a01b03811661067f57604051631e4fbdf760e01b8152600060048201526024016103d7565b6106888161070f565b50565b6000818152600260205260408120546001600160a01b03168061045357604051637e27328960e01b8152600481018490526024016103d7565b6006546001600160a01b031633146104e05760405163118cdaa760e01b81523360048201526024016103d7565b61070b828260405180602001604052806000815250610761565b5050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61076b8383610778565b61047660008484846107dd565b6001600160a01b0382166107a257604051633250574960e11b8152600060048201526024016103d7565b60006107b083836000610907565b90506001600160a01b03811615610476576040516339e3563760e11b8152600060048201526024016103d7565b6001600160a01b0383163b1561090157604051630a85bd0160e11b81526001600160a01b0384169063150b7a029061081f903390889087908790600401610ed6565b6020604051808303816000875af192505050801561085a575060408051601f3d908101601f1916820190925261085791810190610f13565b60015b6108c3573d808015610888576040519150601f19603f3d011682016040523d82523d6000602084013e61088d565b606091505b5080516000036108bb57604051633250574960e11b81526001600160a01b03851660048201526024016103d7565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b146108ff57604051633250574960e11b81526001600160a01b03851660048201526024016103d7565b505b50505050565b6000828152600260205260408120546001600160a01b039081169083161561093457610934818486610a00565b6001600160a01b0381161561097257610951600085600080610a64565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b038516156109a1576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b610a0b838383610b6a565b610476576001600160a01b038316610a3957604051637e27328960e01b8152600481018290526024016103d7565b60405163177e802f60e01b81526001600160a01b0383166004820152602481018290526044016103d7565b8080610a7857506001600160a01b03821615155b15610b3a576000610a888461068b565b90506001600160a01b03831615801590610ab45750826001600160a01b0316816001600160a01b031614155b8015610ac75750610ac5818461061f565b155b15610af05760405163a9fbf51f60e01b81526001600160a01b03841660048201526024016103d7565b8115610b385783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b03831615801590610bc85750826001600160a01b0316846001600160a01b03161480610ba45750610ba4848461061f565b80610bc857506000828152600460205260409020546001600160a01b038481169116145b949350505050565b6001600160e01b03198116811461068857600080fd5b600060208284031215610bf857600080fd5b8135610c0381610bd0565b9392505050565b6000815180845260005b81811015610c3057602081850181015186830182015201610c14565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610c036020830184610c0a565b600060208284031215610c7557600080fd5b5035919050565b80356001600160a01b038116811461045657600080fd5b60008060408385031215610ca657600080fd5b610caf83610c7c565b946020939093013593505050565b600080600060608486031215610cd257600080fd5b610cdb84610c7c565b9250610ce960208501610c7c565b9150604084013590509250925092565b600060208284031215610d0b57600080fd5b610c0382610c7c565b60008060408385031215610d2757600080fd5b610d3083610c7c565b915060208301358015158114610d4557600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610d7c57600080fd5b610d8585610c7c565b9350610d9360208601610c7c565b925060408501359150606085013567ffffffffffffffff80821115610db757600080fd5b818701915087601f830112610dcb57600080fd5b813581811115610ddd57610ddd610d50565b604051601f8201601f19908116603f01168101908382118183101715610e0557610e05610d50565b816040528281528a6020848701011115610e1e57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215610e5557600080fd5b610e5e83610c7c565b9150610e6c60208401610c7c565b90509250929050565b600181811c90821680610e8957607f821691505b602082108103610ea957634e487b7160e01b600052602260045260246000fd5b50919050565b600060018201610ecf57634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610f0990830184610c0a565b9695505050505050565b600060208284031215610f2557600080fd5b8151610c0381610bd056fea26469706673582212202dfe89de97fe86a5f1be87c0a5c9cae61bd864023442072d7ec20e1c3ec1e1c364736f6c6343000814003360a06040523480156200001157600080fd5b506040516200229a3803806200229a833981016040819052620000349162000180565b6001600160a01b0381166080523380600081620000985760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000cb57620000cb81620000d5565b50505050620001b2565b336001600160a01b038216036200012f5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016200008f565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000602082840312156200019357600080fd5b81516001600160a01b0381168114620001ab57600080fd5b9392505050565b6080516120c5620001d5600039600081816101dc0152610ab601526120c56000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063bfc2e4fc11610066578063bfc2e4fc14610185578063f2fde38b14610198578063f3fa880e146101ab578063f9befbfd146101be57600080fd5b80638da5cb5b1461014a5780639681096f1461015b578063b1e217491461017c57600080fd5b80630ca76175146100d45780633944ea3a146100e95780634b0795a8146101075780634f5aae921461010f57806371e4dda61461011757806379ba509714610142575b600080fd5b6100e76100e2366004611779565b6101d1565b005b6100f1610255565b6040516100fe9190611835565b60405180910390f35b6100f16102e3565b6100f16102f0565b60055461012a906001600160a01b031681565b6040516001600160a01b0390911681526020016100fe565b6100e76102fd565b6000546001600160a01b031661012a565b61016e610169366004611878565b6103ac565b6040519081526020016100fe565b61016e60025481565b61016e610193366004611a36565b6103d0565b6100e76101a6366004611b6d565b6104d5565b61016e6101b9366004611b88565b6104e9565b6100f16101cc366004611b88565b61050a565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461021a5760405163c6829f8360e01b815260040160405180910390fd5b610225838383610535565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e690600090a2505050565b6003805461026290611ba1565b80601f016020809104026020016040519081016040528092919081815260200182805461028e90611ba1565b80156102db5780601f106102b0576101008083540402835291602001916102db565b820191906000526020600020905b8154815290600101906020018083116102be57829003601f168201915b505050505081565b6004805461026290611ba1565b6006805461026290611ba1565b6001546001600160a01b031633146103555760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064015b60405180910390fd5b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b60006103b6610a5c565b6103c285858585610ab1565b600281905595945050505050565b60006104136040805160e0810190915280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b61041d818c610b83565b8951156104335761042e818b610b94565b61044d565b6001600160401b0388161561044d5761044d818a8a610bc5565b86511561045e5761045e8188610c5b565b85511561046f5761046f8187610c85565b600580546001600160a01b0319166001600160a01b038f1617905560066104968d82611c29565b5086516104aa9060079060208a0190611586565b506104bf6104b782610caf565b868686610ab1565b60028190559d9c50505050505050505050505050565b6104dd610a5c565b6104e681610f87565b50565b600881815481106104f957600080fd5b600091825260209091200154905081565b6007818154811061051a57600080fd5b90600052602060002001600091509050805461026290611ba1565b826002541461055a5760405163d068bf5b60e01b81526004810184905260240161034c565b6000825111801561061857506106186006805461057690611ba1565b80601f01602080910402602001604051908101604052809291908181526020018280546105a290611ba1565b80156105ef5780601f106105c4576101008083540402835291602001916105ef565b820191906000526020600020905b8154815290600101906020018083116105d257829003601f168201915b5050505050604051806040016040528060068152602001651d1c985d995b60d21b815250611030565b15610795576000828060200190518101906106339190611ce8565b9050670de0b6b3a7640000600061064a8280611d17565b6106549084611d44565b90506106608280611d17565b61066a9084611d58565b925060006106788385611d44565b90506106848385611d58565b6040805160038082526080820190925291955085919060208201606080368337505081516106b99260089250602001906115dc565b508260086000815481106106cf576106cf611d6c565b90600052602060002001819055508160086001815481106106f2576106f2611d6c565b906000526020600020018190555080600860028154811061071557610715611d6c565b600091825260209091200155600361072d8882611c29565b50600461073a8782611c29565b5060055460405189917fb46213618301da6493e4eb9418f3bbb39dd63885882b661a3113d2f042413b3c91610783916006916007916008916001600160a01b0390911690611dff565b60405180910390a25050505050610a1b565b600082511180156108545750610854600680546107b190611ba1565b80601f01602080910402602001604051908101604052809291908181526020018280546107dd90611ba1565b801561082a5780601f106107ff5761010080835404028352916020019161082a565b820191906000526020600020905b81548152906001019060200180831161080d57829003601f168201915b50505050506040518060400160405280600781526020016667726f6365727960c81b815250611030565b15610a1b5760008280602001905181019061086f9190611ce8565b9050670de0b6b3a76400006000816108878180611d17565b6108919190611d17565b61089b9084611d44565b9050816108a88180611d17565b6108b29190611d17565b6108bc9084611d58565b925060006108ca8380611d17565b6108d49085611d44565b90506108e08380611d17565b6108ea9085611d58565b935060006108f88486611d44565b90506109048486611d58565b60408051600480825260a0820190925291965086919060208201608080368337505081516109399260089250602001906115dc565b5083600860008154811061094f5761094f611d6c565b906000526020600020018190555082600860018154811061097257610972611d6c565b906000526020600020018190555081600860028154811061099557610995611d6c565b90600052602060002001819055508060086003815481106109b8576109b8611d6c565b6000918252602090912001556005546040518a917fb46213618301da6493e4eb9418f3bbb39dd63885882b661a3113d2f042413b3c91610a0c916006916007916008916001600160a01b0390911690611dff565b60405180910390a25050505050505b827f7873807bf6ddc50401cd3d29bbe0decee23fd4d68d273f4b5eb83cded4d2f17260036004604051610a4f929190611ec0565b60405180910390a2505050565b6000546001600160a01b03163314610aaf5760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b604482015260640161034c565b565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b8152600401610b09959493929190611ee5565b6020604051808303816000875af1158015610b28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4c9190611ce8565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db890600090a295945050505050565b610b90826000808461108a565b5050565b8051600003610bb65760405163e889636f60e01b815260040160405180910390fd5b60016020830152608090910152565b6000610bd2610100611108565b9050610c05604051806040016040528060068152602001651cdb1bdd125160d21b8152508261112990919063ffffffff16565b610c128160ff8516611147565b6040805180820190915260078152663b32b939b4b7b760c91b6020820152610c3b908290611129565b610c458183611147565b6002602085015251516080909301929092525050565b8051600003610c7d5760405163fe936cb760e01b815260040160405180910390fd5b60a090910152565b8051600003610ca75760405163fe936cb760e01b815260040160405180910390fd5b60c090910152565b60606000610cbe610100611108565b9050610cf76040518060400160405280600c81526020016b31b7b232a637b1b0ba34b7b760a11b8152508261112990919063ffffffff16565b8251610d15906002811115610d0e57610d0e611f2e565b8290611153565b6040805180820190915260088152676c616e677561676560c01b6020820152610d3f908290611129565b6040830151610d56908015610d0e57610d0e611f2e565b604080518082019091526006815265736f7572636560d01b6020820152610d7e908290611129565b6060830151610d8e908290611129565b60a08301515115610e22576040805180820190915260048152636172677360e01b6020820152610dbf908290611129565b610dc88161118c565b60005b8360a0015151811015610e1857610e088460a001518281518110610df157610df1611d6c565b60200260200101518361112990919063ffffffff16565b610e1181611f44565b9050610dcb565b50610e22816111b0565b60808301515115610ee657600083602001516002811115610e4557610e45611f2e565b03610e635760405163a80d31f760e01b815260040160405180910390fd5b60408051808201909152600f81526e39b2b1b932ba39a637b1b0ba34b7b760891b6020820152610e94908290611129565b610ead83602001516002811115610d0e57610d0e611f2e565b6040805180820190915260078152667365637265747360c81b6020820152610ed6908290611129565b6080830151610ee69082906111ce565b60c08301515115610f7f5760408051808201909152600981526862797465734172677360b81b6020820152610f1c908290611129565b610f258161118c565b60005b8360c0015151811015610f7557610f658460c001518281518110610f4e57610f4e611d6c565b6020026020010151836111ce90919063ffffffff16565b610f6e81611f44565b9050610f28565b50610f7f816111b0565b515192915050565b336001600160a01b03821603610fdf5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161034c565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000816040516020016110439190611f5d565b604051602081830303815290604052805190602001208360405160200161106a9190611f5d565b604051602081830303815290604052805190602001201490505b92915050565b80516000036110ac576040516322ce3edd60e01b815260040160405180910390fd5b838360028111156110bf576110bf611f2e565b908160028111156110d2576110d2611f2e565b905250604084018280156110e8576110e8611f2e565b908180156110f8576110f8611f2e565b9052506060909301929092525050565b611110611623565b805161111c90836111db565b5060006020820152919050565b6111368260038351611252565b81516111429082611371565b505050565b610b9082600083611252565b81516111609060c2611399565b50610b90828260405160200161117891815260200190565b6040516020818303038152906040526111ce565b611197816004611402565b6001816020018181516111aa9190611f79565b90525050565b6111bb816007611402565b6001816020018181516111aa9190611f8c565b6111368260028351611252565b6040805180820190915260608152600060208201526111fb602083611d58565b156112235761120b602083611d58565b611216906020611f8c565b6112209083611f79565b91505b60208084018390526040518085526000815290818401018181101561124757600080fd5b604052509192915050565b6017816001600160401b03161161127e5782516112789060e0600585901b168317611399565b50505050565b60ff816001600160401b0316116112be5782516112a6906018611fe0600586901b1617611399565b508251611278906001600160401b0383166001611419565b61ffff816001600160401b0316116112ff5782516112e7906019611fe0600586901b1617611399565b508251611278906001600160401b0383166002611419565b63ffffffff816001600160401b03161161134257825161132a90601a611fe0600586901b1617611399565b508251611278906001600160401b0383166004611419565b825161135990601b611fe0600586901b1617611399565b508251611278906001600160401b0383166008611419565b6040805180820190915260608152600060208201526113928383845161149e565b9392505050565b60408051808201909152606081526000602082015282515160006113be826001611f79565b9050846020015182106113df576113df856113da836002611d17565b61156f565b84516020838201018581535080518211156113f8578181525b5093949350505050565b815161114290601f611fe0600585901b1617611399565b604080518082019091526060815260006020820152835151600061143d8285611f79565b9050856020015181111561145a5761145a866113da836002611d17565b6000600161146a86610100612083565b6114749190611f8c565b90508651828101878319825116178152508051831115611492578281525b50959695505050505050565b60408051808201909152606081526000602082015282518211156114c157600080fd5b83515160006114d08483611f79565b905085602001518111156114ed576114ed866113da836002611d17565b855180518382016020019160009180851115611507578482525b505050602086015b602086106115475780518252611526602083611f79565b9150611533602082611f79565b9050611540602087611f8c565b955061150f565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b815161157b83836111db565b506112788382611371565b8280548282559060005260206000209081019282156115cc579160200282015b828111156115cc57825182906115bc9082611c29565b50916020019190600101906115a6565b506115d8929150611658565b5090565b828054828255906000526020600020908101928215611617579160200282015b828111156116175782518255916020019190600101906115fc565b506115d8929150611675565b604051806040016040528061164b604051806040016040528060608152602001600081525090565b8152602001600081525090565b808211156115d857600061166c828261168a565b50600101611658565b5b808211156115d85760008155600101611676565b50805461169690611ba1565b6000825580601f106116a6575050565b601f0160209004906000526020600020908101906104e69190611675565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611702576117026116c4565b604052919050565b600082601f83011261171b57600080fd5b81356001600160401b03811115611734576117346116c4565b611747601f8201601f19166020016116da565b81815284602083860101111561175c57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561178e57600080fd5b8335925060208401356001600160401b03808211156117ac57600080fd5b6117b88783880161170a565b935060408601359150808211156117ce57600080fd5b506117db8682870161170a565b9150509250925092565b60005b838110156118005781810151838201526020016117e8565b50506000910152565b600081518084526118218160208601602086016117e5565b601f01601f19169290920160200192915050565b6020815260006113926020830184611809565b80356001600160401b038116811461185f57600080fd5b919050565b803563ffffffff8116811461185f57600080fd5b6000806000806080858703121561188e57600080fd5b84356001600160401b038111156118a457600080fd5b6118b08782880161170a565b9450506118bf60208601611848565b92506118cd60408601611864565b9396929550929360600135925050565b80356001600160a01b038116811461185f57600080fd5b803560ff8116811461185f57600080fd5b60006001600160401b0382111561191e5761191e6116c4565b5060051b60200190565b600082601f83011261193957600080fd5b8135602061194e61194983611905565b6116da565b82815260059290921b8401810191818101908684111561196d57600080fd5b8286015b848110156119ac5780356001600160401b038111156119905760008081fd5b61199e8986838b010161170a565b845250918301918301611971565b509695505050505050565b600082601f8301126119c857600080fd5b813560206119d861194983611905565b82815260059290921b840181019181810190868411156119f757600080fd5b8286015b848110156119ac5780356001600160401b03811115611a1a5760008081fd5b611a288986838b010161170a565b8452509183019183016119fb565b60008060008060008060008060008060006101608c8e031215611a5857600080fd5b611a618c6118dd565b9a506001600160401b038060208e01351115611a7c57600080fd5b611a8c8e60208f01358f0161170a565b9a508060408e01351115611a9f57600080fd5b611aaf8e60408f01358f0161170a565b99508060608e01351115611ac257600080fd5b611ad28e60608f01358f0161170a565b9850611ae060808e016118f4565b9750611aee60a08e01611848565b96508060c08e01351115611b0157600080fd5b611b118e60c08f01358f01611928565b95508060e08e01351115611b2457600080fd5b50611b358d60e08e01358e016119b7565b9350611b446101008d01611848565b9250611b536101208d01611864565b91506101408c013590509295989b509295989b9093969950565b600060208284031215611b7f57600080fd5b611392826118dd565b600060208284031215611b9a57600080fd5b5035919050565b600181811c90821680611bb557607f821691505b602082108103611bd557634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561114257600081815260208120601f850160051c81016020861015611c025750805b601f850160051c820191505b81811015611c2157828155600101611c0e565b505050505050565b81516001600160401b03811115611c4257611c426116c4565b611c5681611c508454611ba1565b84611bdb565b602080601f831160018114611c8b5760008415611c735750858301515b600019600386901b1c1916600185901b178555611c21565b600085815260208120601f198616915b82811015611cba57888601518255948401946001909101908401611c9b565b5085821015611cd85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215611cfa57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761108457611084611d01565b634e487b7160e01b600052601260045260246000fd5b600082611d5357611d53611d2e565b500490565b600082611d6757611d67611d2e565b500690565b634e487b7160e01b600052603260045260246000fd5b60008154611d8f81611ba1565b808552602060018381168015611dac5760018114611dc657611df4565b60ff1985168884015283151560051b880183019550611df4565b866000528260002060005b85811015611dec5781548a8201860152908301908401611dd1565b890184019650505b505050505092915050565b608081526000611e126080830187611d82565b6020838203818501528187548084528284019150828160051b85010160008a8152848120815b84811015611e6557878403601f19018652611e538483611d82565b95870195935060019182019101611e38565b5050878203604089015289548083528a8252858220928601965093509091505b82811015611ea157815485529383019360019182019101611e85565b5050506001600160a01b03851660608501525090505b95945050505050565b604081526000611ed36040830185611d82565b8281036020840152611eb78185611d82565b6001600160401b038616815260a060208201526000611f0760a0830187611809565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b634e487b7160e01b600052602160045260246000fd5b600060018201611f5657611f56611d01565b5060010190565b60008251611f6f8184602087016117e5565b9190910192915050565b8082018082111561108457611084611d01565b8181038181111561108457611084611d01565b600181815b80851115611fda578160001904821115611fc057611fc0611d01565b80851615611fcd57918102915b93841c9390800290611fa4565b509250929050565b600082611ff157506001611084565b81611ffe57506000611084565b8160018114612014576002811461201e5761203a565b6001915050611084565b60ff84111561202f5761202f611d01565b50506001821b611084565b5060208310610133831016604e8410600b841016171561205d575081810a611084565b6120678383611f9f565b806000190482111561207b5761207b611d01565b029392505050565b60006113928383611fe256fea2646970667358221220b4bf3a0098b6ff40f6edd9056e87641466d3f03c654179880332543b2d83856964736f6c63430008140033",
	"deployedBytecode": "0x6080604052600436106101c65760003560e01c806379cc6790116100f7578063a9059cbb11610095578063dd62ed3e11610064578063dd62ed3e14610518578063e6cf1f2d1461055e578063e75ad1151461057e578063f2fde38b1461059e57600080fd5b8063a9059cbb146104ac578063abc3e88b146104cc578063c37964bd146104ec578063d8f1d7241461050257600080fd5b80638a5b44b3116100d15780638a5b44b3146104445780638da5cb5b1461045957806391a89a291461047757806395d89b411461049757600080fd5b806379cc6790146103d05780637f092484146103f0578063839e19d91461041057600080fd5b806324600fc31161016457806348a3b4a41161013e57806348a3b4a4146103455780634da2d12a1461036557806370a0823114610385578063715018a6146103bb57600080fd5b806324600fc3146102f2578063313ce5671461030957806342966c681461032557600080fd5b806314444130116101a0578063144441301461026157806318160ddd1461029357806322a0bb6b146102b257806323b872dd146102d257600080fd5b806302598e0a146101d257806306fdde031461020f578063095ea7b31461023157600080fd5b366101cd57005b600080fd5b3480156101de57600080fd5b506009546101f2906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561021b57600080fd5b506102246105be565b604051610206919061211d565b34801561023d57600080fd5b5061025161024c366004612153565b610650565b6040519015158152602001610206565b34801561026d57600080fd5b5061028161027c36600461217d565b61066a565b60405161020696959493929190612196565b34801561029f57600080fd5b506002545b604051908152602001610206565b3480156102be57600080fd5b506007546101f2906001600160a01b031681565b3480156102de57600080fd5b506102516102ed3660046121ea565b6107b8565b3480156102fe57600080fd5b506103076108a7565b005b34801561031557600080fd5b5060405160128152602001610206565b34801561033157600080fd5b5061030761034036600461217d565b610941565b34801561035157600080fd5b506008546101f2906001600160a01b031681565b34801561037157600080fd5b50600b546101f2906001600160a01b031681565b34801561039157600080fd5b506102a46103a0366004612226565b6001600160a01b031660009081526020819052604090205490565b3480156103c757600080fd5b5061030761094b565b3480156103dc57600080fd5b506103076103eb366004612153565b61095f565b3480156103fc57600080fd5b50600a546101f2906001600160a01b031681565b34801561041c57600080fd5b5061043061042b36600461217d565b610978565b604051610206989796959493929190612241565b34801561045057600080fd5b50610307610b5a565b34801561046557600080fd5b506005546001600160a01b03166101f2565b34801561048357600080fd5b506006546101f2906001600160a01b031681565b3480156104a357600080fd5b50610224610c83565b3480156104b857600080fd5b506102516104c7366004612153565b610c92565b3480156104d857600080fd5b506103076104e7366004612153565b610d5c565b3480156104f857600080fd5b506102a4600d5481565b34801561050e57600080fd5b506102a4600c5481565b34801561052457600080fd5b506102a46105333660046122b2565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561056a57600080fd5b50610307610579366004612331565b611112565b34801561058a57600080fd5b50610307610599366004612153565b61175c565b3480156105aa57600080fd5b506103076105b9366004612226565b61195f565b6060600380546105cd90612413565b80601f01602080910402602001604051908101604052809291908181526020018280546105f990612413565b80156106465780601f1061061b57610100808354040283529160200191610646565b820191906000526020600020905b81548152906001019060200180831161062957829003601f168201915b5050505050905090565b60003361065e81858561199a565b60019150505b92915050565b600e6020526000908152604090208054819061068590612413565b80601f01602080910402602001604051908101604052809291908181526020018280546106b190612413565b80156106fe5780601f106106d3576101008083540402835291602001916106fe565b820191906000526020600020905b8154815290600101906020018083116106e157829003601f168201915b50505050509080600101805461071390612413565b80601f016020809104026020016040519081016040528092919081815260200182805461073f90612413565b801561078c5780601f106107615761010080835404028352916020019161078c565b820191906000526020600020905b81548152906001019060200180831161076f57829003601f168201915b50505050600283015460038401546004850154600590950154939491939092506001600160a01b031686565b6000336107c68582856119ac565b6107d1858585611a2a565b6008546001600160a01b039081169063ba3d69d79073aa7880db88d8e051428b5204817e58d8327340de908790610809908616611a89565b61082c60125b61081d9060ff16600a612547565b610827908a612553565b611a9f565b60405160200161083d929190612575565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161086a9392919061261a565b600060405180830381600087803b15801561088457600080fd5b505af1158015610898573d6000803e3d6000fd5b50600198975050505050505050565b6108af611b32565b604051600090339047908381818185875af1925050503d80600081146108f1576040519150601f19603f3d011682016040523d82523d6000602084013e6108f6565b606091505b505090508061093e5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064015b60405180910390fd5b50565b61093e3382611b5f565b610953611b32565b61095d6000611b95565b565b61096a8233836119ac565b6109748282611b5f565b5050565b600f6020526000908152604090208054819061099390612413565b80601f01602080910402602001604051908101604052809291908181526020018280546109bf90612413565b8015610a0c5780601f106109e157610100808354040283529160200191610a0c565b820191906000526020600020905b8154815290600101906020018083116109ef57829003601f168201915b505050505090806001018054610a2190612413565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4d90612413565b8015610a9a5780601f10610a6f57610100808354040283529160200191610a9a565b820191906000526020600020905b815481529060010190602001808311610a7d57829003601f168201915b505050505090806002018054610aaf90612413565b80601f0160208091040260200160405190810160405280929190818152602001828054610adb90612413565b8015610b285780601f10610afd57610100808354040283529160200191610b28565b820191906000526020600020905b815481529060010190602001808311610b0b57829003601f168201915b50505060038401546004850154600586015460068701546007909701549596929591945092506001600160a01b031688565b610b62611b32565b6007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcf919061264f565b60075460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c459190612668565b61093e5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610935565b6060600480546105cd90612413565b600033610ca0818585611a2a565b6008546001600160a01b039081169063ba3d69d79073aa7880db88d8e051428b5204817e58d8327340de908790610cd8908616611a89565b610ce2601261080f565b604051602001610cf3929190612575565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401610d209392919061261a565b600060405180830381600087803b158015610d3a57600080fd5b505af1158015610d4e573d6000803e3d6000fd5b506001979650505050505050565b610d64611b32565b60008111610db45760405162461bcd60e51b815260206004820152601f60248201527f416d6f756e742073686f756c642062652067726561746572207468616e2030006044820152606401610935565b6001600160a01b038216600090815260208190526040902054811115610e1c5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420434152424f4e20746f6b656e730000000000006044820152606401610935565b80600c5410610ea057600754604051633790cf5760e01b8152600481018390526001600160a01b0390911690633790cf5790602401600060405180830381600087803b158015610e6b57600080fd5b505af1158015610e7f573d6000803e3d6000fd5b5050505080600c6000828254610e95919061268a565b90915550610f7f9050565b6000600c5482610eb0919061268a565b60065460075460405163f3fef3a360e01b81526001600160a01b03918216600482015260248101849052929350169063f3fef3a390604401600060405180830381600087803b158015610f0257600080fd5b505af1158015610f16573d6000803e3d6000fd5b5050600754604051633790cf5760e01b8152600481018690526001600160a01b039091169250633790cf579150602401600060405180830381600087803b158015610f6057600080fd5b505af1158015610f74573d6000803e3d6000fd5b50506000600c555050505b80600d6000828254610f91919061268a565b90915550610fa0905081610941565b600a546040516340d097c360e01b81526001600160a01b03848116600483015260009216906340d097c3906024016020604051808303816000875af1158015610fed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611011919061264f565b6008549091506001600160a01b031663ba3d69d773aa7880db88d8e051428b5204817e58d8327340de8561105960125b61104f9060ff16600a612547565b6108279088612553565b604051602001611069919061269d565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016110969392919061261a565b600060405180830381600087803b1580156110b057600080fd5b505af11580156110c4573d6000803e3d6000fd5b505060408051858152602081018590526001600160a01b03871693507fd01c6570076b5796ea5b39d13cb939955b5d2ec43f5ba7ee52e6cd5613823aad9250015b60405180910390a2505050565b61111a611b32565b61117787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820190915260068152651d1c985d995b60d21b60208201529150611be79050565b156113cb576040805160c081019091526000908087878481811061119d5761119d61275e565b90506020028101906111af9190612774565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001878760018181106111fc576111fc61275e565b905060200281019061120e9190612774565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050602090920191508690869081811061125d5761125d61275e565b60209081029290920135835250018585600181811061127e5761127e61275e565b60209081029290920135835250018585600281811061129f5761129f61275e565b905060200201358152602001836001600160a01b0316815250905080600e60008b815260200190815260200160002060008201518160000190816112e3919061281f565b50602082015160018201906112f8908261281f565b5060408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b031602179055509050506113598160a00151826080015161175c565b61136b8160a001518260800151610d5c565b887f7c81b460a6b12a2e4a87588702b99415c687cce28884559cc2d0fd1947d16817826000015183602001518460400151856060015186608001518760a001516040516113bd96959493929190612196565b60405180910390a250611752565b61142987878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152600781526667726f6365727960c81b60208201529150611be79050565b1561171b57604080516101008101909152600090808787848181106114505761145061275e565b90506020028101906114629190612774565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001878760018181106114af576114af61275e565b90506020028101906114c19190612774565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020018787600281811061150e5761150e61275e565b90506020028101906115209190612774565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050602090920191508690869081811061156f5761156f61275e565b6020908102929092013583525001858560018181106115905761159061275e565b6020908102929092013583525001858560028181106115b1576115b161275e565b6020908102929092013583525001858560038181106115d2576115d261275e565b905060200201358152602001836001600160a01b0316815250905080600f60008b81526020019081526020016000206000820151816000019081611616919061281f565b506020820151600182019061162b908261281f565b5060408201516002820190611640908261281f565b50606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a8154816001600160a01b0302191690836001600160a01b031602179055509050506116ab8160e001518260c0015161175c565b6116bd8160e001518260c00151610d5c565b887fbd10a9db6369936f36a7ea3c03e87509cf540e7505da28668ee8d80ce52ea30d826000015183602001518460400151856060015186608001518760a001518860c001518960e001516040516113bd989796959493929190612241565b60405162461bcd60e51b815260206004820152600c60248201526b496e76616c696420666c616760a01b6044820152606401610935565b5050505050505050565b611764611b32565b600081116117b45760405162461bcd60e51b815260206004820152601f60248201527f416d6f756e742073686f756c642062652067726561746572207468616e2030006044820152606401610935565b600081600d546117c491906128df565b905080600c541015611863576000600c54826117e0919061268a565b60065460075460405163f3fef3a360e01b81526001600160a01b03918216600482015260248101849052929350169063f3fef3a390604401600060405180830381600087803b15801561183257600080fd5b505af1158015611846573d6000803e3d6000fd5b5050505080600c600082825461185c91906128df565b9091555050505b61186d8383611c40565b81600d600082825461187f91906128df565b90915550506008546001600160a01b031663ba3d69d773aa7880db88d8e051428b5204817e58d8327340de856118b56012611041565b6040516020016118c591906128f2565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016118f29392919061261a565b600060405180830381600087803b15801561190c57600080fd5b505af1158015611920573d6000803e3d6000fd5b50505050826001600160a01b03167fa46287cd6870c6d05612bb95b96833337e1e8a0ccea8be539c860dee7ac5f6e18360405161110591815260200190565b611967611b32565b6001600160a01b03811661199157604051631e4fbdf760e01b815260006004820152602401610935565b61093e81611b95565b6119a78383836001611c76565b505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114611a245781811015611a1557604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610935565b611a2484848484036000611c76565b50505050565b6001600160a01b038316611a5457604051634b637e8f60e11b815260006004820152602401610935565b6001600160a01b038216611a7e5760405163ec442f0560e01b815260006004820152602401610935565b6119a7838383611d4b565b60606106646001600160a01b0383166014611e75565b60606000611aac83611ff5565b600101905060008167ffffffffffffffff811115611acc57611acc6127bb565b6040519080825280601f01601f191660200182016040528015611af6576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611b0057509392505050565b6005546001600160a01b0316331461095d5760405163118cdaa760e01b8152336004820152602401610935565b6001600160a01b038216611b8957604051634b637e8f60e11b815260006004820152602401610935565b61097482600083611d4b565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081604051602001611bfa919061297a565b6040516020818303038152906040528051906020012083604051602001611c21919061297a565b6040516020818303038152906040528051906020012014905092915050565b6001600160a01b038216611c6a5760405163ec442f0560e01b815260006004820152602401610935565b61097460008383611d4b565b6001600160a01b038416611ca05760405163e602df0560e01b815260006004820152602401610935565b6001600160a01b038316611cca57604051634a1406b160e11b815260006004820152602401610935565b6001600160a01b0380851660009081526001602090815260408083209387168352929052208290558015611a2457826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051611d3d91815260200190565b60405180910390a350505050565b6001600160a01b038316611d76578060026000828254611d6b91906128df565b90915550611de89050565b6001600160a01b03831660009081526020819052604090205481811015611dc95760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610935565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b038216611e0457600280548290039055611e23565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611e6891815260200190565b60405180910390a3505050565b6060826000611e85846002612996565b611e909060026128df565b67ffffffffffffffff811115611ea857611ea86127bb565b6040519080825280601f01601f191660200182016040528015611ed2576020820181803683370190505b509050600360fc1b81600081518110611eed57611eed61275e565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f1c57611f1c61275e565b60200101906001600160f81b031916908160001a9053506000611f40856002612996565b611f4b9060016128df565b90505b6001811115611fc3576f181899199a1a9b1b9c1cb0b131b232b360811b83600f1660108110611f7f57611f7f61275e565b1a60f81b828281518110611f9557611f9561275e565b60200101906001600160f81b031916908160001a90535060049290921c91611fbc816129ad565b9050611f4e565b508115611fed5760405163e22e27eb60e01b81526004810186905260248101859052604401610935565b949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106120345772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612060576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061207e57662386f26fc10000830492506010015b6305f5e1008310612096576305f5e100830492506008015b61271083106120aa57612710830492506004015b606483106120bc576064830492506002015b600a83106106645760010192915050565b60005b838110156120e85781810151838201526020016120d0565b50506000910152565b600081518084526121098160208601602086016120cd565b601f01601f19169290920160200192915050565b60208152600061213060208301846120f1565b9392505050565b80356001600160a01b038116811461214e57600080fd5b919050565b6000806040838503121561216657600080fd5b61216f83612137565b946020939093013593505050565b60006020828403121561218f57600080fd5b5035919050565b60c0815260006121a960c08301896120f1565b82810360208401526121bb81896120f1565b60408401979097525050606081019390935260808301919091526001600160a01b031660a09091015292915050565b6000806000606084860312156121ff57600080fd5b61220884612137565b925061221660208501612137565b9150604084013590509250925092565b60006020828403121561223857600080fd5b61213082612137565b60006101008083526122558184018c6120f1565b90508281036020840152612269818b6120f1565b9050828103604084015261227d818a6120f1565b60608401989098525050608081019490945260a084019290925260c08301526001600160a01b031660e0909101529392505050565b600080604083850312156122c557600080fd5b6122ce83612137565b91506122dc60208401612137565b90509250929050565b60008083601f8401126122f757600080fd5b50813567ffffffffffffffff81111561230f57600080fd5b6020830191508360208260051b850101111561232a57600080fd5b9250929050565b60008060008060008060008060a0898b03121561234d57600080fd5b88359750602089013567ffffffffffffffff8082111561236c57600080fd5b818b0191508b601f83011261238057600080fd5b81358181111561238f57600080fd5b8c60208285010111156123a157600080fd5b6020830199508098505060408b01359150808211156123bf57600080fd5b6123cb8c838d016122e5565b909750955060608b01359150808211156123e457600080fd5b506123f18b828c016122e5565b9094509250612404905060808a01612137565b90509295985092959890939650565b600181811c9082168061242757607f821691505b60208210810361244757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561249e5781600019048211156124845761248461244d565b8085161561249157918102915b93841c9390800290612468565b509250929050565b6000826124b557506001610664565b816124c257506000610664565b81600181146124d857600281146124e2576124fe565b6001915050610664565b60ff8411156124f3576124f361244d565b50506001821b610664565b5060208310610133831016604e8410600b8410161715612521575081810a610664565b61252b8383612463565b806000190482111561253f5761253f61244d565b029392505050565b600061213083836124a6565b60008261257057634e487b7160e01b600052601260045260246000fd5b500490565b600360fc1b81526000602b60f81b806001840152603360f81b600284015280600384015268436f6e67726174732160b81b600484015280600d8401525083516125c581600e8501602088016120cd565b6c0103a3930b739b332b93932b21609d1b600e9184019182015283516125f281601b8401602088016120cd565b6e20434152424f4e20746f20796f752160881b601b9290910191820152602a01949350505050565b6001600160a01b03848116825283166020820152606060408201819052600090612646908301846120f1565b95945050505050565b60006020828403121561266157600080fd5b5051919050565b60006020828403121561267a57600080fd5b8151801515811461213057600080fd5b818103818111156106645761066461244d565b600360fc1b81526000602b60f81b806001840152603360f81b600284015280600384015268436f6e67726174732160b81b600484015280600d840152507f596f75206a75737420726563656976656420616e206f66667365742063657274600e83015268034b334b1b0ba3290960bd1b602e8301526f02cb7bab91037b33339b2ba103bb0b9960851b6037830152825161273e8160478501602087016120cd565b6820434f3220546f6e7360b81b6047939091019283015250605001919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261278b57600080fd5b83018035915067ffffffffffffffff8211156127a657600080fd5b60200191503681900382131561232a57600080fd5b634e487b7160e01b600052604160045260246000fd5b601f8211156119a757600081815260208120601f850160051c810160208610156127f85750805b601f850160051c820191505b8181101561281757828155600101612804565b505050505050565b815167ffffffffffffffff811115612839576128396127bb565b61284d816128478454612413565b846127d1565b602080601f831160018114612882576000841561286a5750858301515b600019600386901b1c1916600185901b178555612817565b600085815260208120601f198616915b828110156128b157888601518255948401946001909101908401612892565b50858210156128cf5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156106645761066461244d565b600360fc1b81526000602b60f81b806001840152603360f81b600284015280600384015268436f6e67726174732160b81b600484015280600d840152506f02cb7ba90353ab9ba103137bab3b43a160851b600e830152825161295b81601e8501602087016120cd565b6720434152424f4e2160c01b601e939091019283015250602601919050565b6000825161298c8184602087016120cd565b9190910192915050565b80820281158282048414176106645761066461244d565b6000816129bc576129bc61244d565b50600019019056fea264697066735822122085b42614247e66e2c889b8cdf56458ba4b63333ab338b101569dd64a12d502f864736f6c63430008140033",
	"devdoc": {
		"errors": {
			"ERC20InsufficientAllowance(address,uint256,uint256)": [
				{
					"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
					"params": {
						"allowance": "Amount of tokens a `spender` is allowed to operate with.",
						"needed": "Minimum amount required to perform a transfer.",
						"spender": "Address that may be allowed to operate on tokens without being their owner."
					}
				}
			],
			"ERC20InsufficientBalance(address,uint256,uint256)": [
				{
					"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
					"params": {
						"balance": "Current balance for the interacting account.",
						"needed": "Minimum amount required to perform a transfer.",
						"sender": "Address whose tokens are being transferred."
					}
				}
			],
			"ERC20InvalidApprover(address)": [
				{
					"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
					"params": {
						"approver": "Address initiating an approval operation."
					}
				}
			],
			"ERC20InvalidReceiver(address)": [
				{
					"details": "Indicates a failure with the token `receiver`. Used in transfers.",
					"params": {
						"receiver": "Address to which tokens are being transferred."
					}
				}
			],
			"ERC20InvalidSender(address)": [
				{
					"details": "Indicates a failure with the token `sender`. Used in transfers.",
					"params": {
						"sender": "Address whose tokens are being transferred."
					}
				}
			],
			"ERC20InvalidSpender(address)": [
				{
					"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
					"params": {
						"spender": "Address that may be allowed to operate on tokens without being their owner."
					}
				}
			],
			"OwnableInvalidOwner(address)": [
				{
					"details": "The owner is not a valid owner account. (eg. `address(0)`)"
				}
			],
			"OwnableUnauthorizedAccount(address)": [
				{
					"details": "The caller account is not authorized to perform an operation."
				}
			],
			"StringsInsufficientHexLength(uint256,uint256)": [
				{
					"details": "The `value` string doesn't fit in the specified `length`."
				}
			]
		},
		"events": {
			"Approval(address,address,uint256)": {
				"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
			},
			"Transfer(address,address,uint256)": {
				"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
			}
		},
		"kind": "dev",
		"methods": {
			"allowance(address,address)": {
				"details": "See {IERC20-allowance}."
			},
			"approve(address,uint256)": {
				"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
			},
			"balanceOf(address)": {
				"details": "See {IERC20-balanceOf}."
			},
			"burn(uint256)": {
				"details": "Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."
			},
			"burnFrom(address,uint256)": {
				"details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
			},
			"decimals()": {
				"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
			},
			"name()": {
				"details": "Returns the name of the token."
			},
			"owner()": {
				"details": "Returns the address of the current owner."
			},
			"renounceOwnership()": {
				"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
			},
			"symbol()": {
				"details": "Returns the symbol of the token, usually a shorter version of the name."
			},
			"totalSupply()": {
				"details": "See {IERC20-totalSupply}."
			},
			"transferOwnership(address)": {
				"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
			}
		},
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {},
		"version": 1
	},
	"storageLayout": {
		"storage": [
			{
				"astId": 2750,
				"contract": "contracts/Carbon.sol:Carbon",
				"label": "_balances",
				"offset": 0,
				"slot": "0",
				"type": "t_mapping(t_address,t_uint256)"
			},
			{
				"astId": 2756,
				"contract": "contracts/Carbon.sol:Carbon",
				"label": "_allowances",
				"offset": 0,
				"slot": "1",
				"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
			},
			{
				"astId": 2758,
				"contract": "contracts/Carbon.sol:Carbon",
				"label": "_totalSupply",
				"offset": 0,
				"slot": "2",
				"type": "t_uint256"
			},
			{
				"astId": 2760,
				"contract": "contracts/Carbon.sol:Carbon",
				"label": "_name",
				"offset": 0,
				"slot": "3",
				"type": "t_string_storage"
			},
			{
				"astId": 2762,
				"contract": "contracts/Carbon.sol:Carbon",
				"label": "_symbol",
				"offset": 0,
				"slot": "4",
				"type": "t_string_storage"
			},
			{
				"astId": 2451,
				"contract": "contracts/Carbon.sol:Carbon",
				"label": "_owner",
				"offset": 0,
				"slot": "5",
				"type": "t_address"
			},
			{
				"astId": 6534,
				"contract": "contracts/Carbon.sol:Carbon",
				"label": "TCO2FaucetExtense",
				"offset": 0,
				"slot": "6",
				"type": "t_contract(ITCO2Faucet)7608"
			},
			{
				"astId": 6537,
				"contract": "contracts/Carbon.sol:Carbon",
				"label": "TCO2TokenExtense",
				"offset": 0,
				"slot": "7",
				"type": "t_contract(ITCO2Token)7620"
			},
			{
				"astId": 6539,
				"contract": "contracts/Carbon.sol:Carbon",
				"label": "EPNS_COMM_ADDRESS",
				"offset": 0,
				"slot": "8",
				"type": "t_address"
			},
			{
				"astId": 6541,
				"contract": "contracts/Carbon.sol:Carbon",
				"label": "LINK_TOKEN_ADDRESS",
				"offset": 0,
				"slot": "9",
				"type": "t_address"
			},
			{
				"astId": 6543,
				"contract": "contracts/Carbon.sol:Carbon",
				"label": "CARBON_CERTIFICATE_ADDRESS",
				"offset": 0,
				"slot": "10",
				"type": "t_address"
			},
			{
				"astId": 6545,
				"contract": "contracts/Carbon.sol:Carbon",
				"label": "CARBON_CALCULATOR_ADDRESS",
				"offset": 0,
				"slot": "11",
				"type": "t_address"
			},
			{
				"astId": 6547,
				"contract": "contracts/Carbon.sol:Carbon",
				"label": "TCO2TokensInContract",
				"offset": 0,
				"slot": "12",
				"type": "t_uint256"
			},
			{
				"astId": 6549,
				"contract": "contracts/Carbon.sol:Carbon",
				"label": "carbonTokensMinted",
				"offset": 0,
				"slot": "13",
				"type": "t_uint256"
			},
			{
				"astId": 6554,
				"contract": "contracts/Carbon.sol:Carbon",
				"label": "travelRequests",
				"offset": 0,
				"slot": "14",
				"type": "t_mapping(t_bytes32,t_struct(Travel)7635_storage)"
			},
			{
				"astId": 6559,
				"contract": "contracts/Carbon.sol:Carbon",
				"label": "groceryRequests",
				"offset": 0,
				"slot": "15",
				"type": "t_mapping(t_bytes32,t_struct(Grocery)7652_storage)"
			}
		],
		"types": {
			"t_address": {
				"encoding": "inplace",
				"label": "address",
				"numberOfBytes": "20"
			},
			"t_bytes32": {
				"encoding": "inplace",
				"label": "bytes32",
				"numberOfBytes": "32"
			},
			"t_contract(ITCO2Faucet)7608": {
				"encoding": "inplace",
				"label": "contract ITCO2Faucet",
				"numberOfBytes": "20"
			},
			"t_contract(ITCO2Token)7620": {
				"encoding": "inplace",
				"label": "contract ITCO2Token",
				"numberOfBytes": "20"
			},
			"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => mapping(address => uint256))",
				"numberOfBytes": "32",
				"value": "t_mapping(t_address,t_uint256)"
			},
			"t_mapping(t_address,t_uint256)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => uint256)",
				"numberOfBytes": "32",
				"value": "t_uint256"
			},
			"t_mapping(t_bytes32,t_struct(Grocery)7652_storage)": {
				"encoding": "mapping",
				"key": "t_bytes32",
				"label": "mapping(bytes32 => struct Grocery)",
				"numberOfBytes": "32",
				"value": "t_struct(Grocery)7652_storage"
			},
			"t_mapping(t_bytes32,t_struct(Travel)7635_storage)": {
				"encoding": "mapping",
				"key": "t_bytes32",
				"label": "mapping(bytes32 => struct Travel)",
				"numberOfBytes": "32",
				"value": "t_struct(Travel)7635_storage"
			},
			"t_string_storage": {
				"encoding": "bytes",
				"label": "string",
				"numberOfBytes": "32"
			},
			"t_struct(Grocery)7652_storage": {
				"encoding": "inplace",
				"label": "struct Grocery",
				"members": [
					{
						"astId": 7637,
						"contract": "contracts/Carbon.sol:Carbon",
						"label": "moneySpentProteins",
						"offset": 0,
						"slot": "0",
						"type": "t_string_storage"
					},
					{
						"astId": 7639,
						"contract": "contracts/Carbon.sol:Carbon",
						"label": "moneySpentFats",
						"offset": 0,
						"slot": "1",
						"type": "t_string_storage"
					},
					{
						"astId": 7641,
						"contract": "contracts/Carbon.sol:Carbon",
						"label": "moneySpentCarbs",
						"offset": 0,
						"slot": "2",
						"type": "t_string_storage"
					},
					{
						"astId": 7643,
						"contract": "contracts/Carbon.sol:Carbon",
						"label": "proteinsEmission",
						"offset": 0,
						"slot": "3",
						"type": "t_uint256"
					},
					{
						"astId": 7645,
						"contract": "contracts/Carbon.sol:Carbon",
						"label": "fatsEmission",
						"offset": 0,
						"slot": "4",
						"type": "t_uint256"
					},
					{
						"astId": 7647,
						"contract": "contracts/Carbon.sol:Carbon",
						"label": "carbsEmission",
						"offset": 0,
						"slot": "5",
						"type": "t_uint256"
					},
					{
						"astId": 7649,
						"contract": "contracts/Carbon.sol:Carbon",
						"label": "foodEmission",
						"offset": 0,
						"slot": "6",
						"type": "t_uint256"
					},
					{
						"astId": 7651,
						"contract": "contracts/Carbon.sol:Carbon",
						"label": "buyer",
						"offset": 0,
						"slot": "7",
						"type": "t_address"
					}
				],
				"numberOfBytes": "256"
			},
			"t_struct(Travel)7635_storage": {
				"encoding": "inplace",
				"label": "struct Travel",
				"members": [
					{
						"astId": 7624,
						"contract": "contracts/Carbon.sol:Carbon",
						"label": "distance",
						"offset": 0,
						"slot": "0",
						"type": "t_string_storage"
					},
					{
						"astId": 7626,
						"contract": "contracts/Carbon.sol:Carbon",
						"label": "nights",
						"offset": 0,
						"slot": "1",
						"type": "t_string_storage"
					},
					{
						"astId": 7628,
						"contract": "contracts/Carbon.sol:Carbon",
						"label": "flightEmission",
						"offset": 0,
						"slot": "2",
						"type": "t_uint256"
					},
					{
						"astId": 7630,
						"contract": "contracts/Carbon.sol:Carbon",
						"label": "hotelEmission",
						"offset": 0,
						"slot": "3",
						"type": "t_uint256"
					},
					{
						"astId": 7632,
						"contract": "contracts/Carbon.sol:Carbon",
						"label": "travelEmission",
						"offset": 0,
						"slot": "4",
						"type": "t_uint256"
					},
					{
						"astId": 7634,
						"contract": "contracts/Carbon.sol:Carbon",
						"label": "buyer",
						"offset": 0,
						"slot": "5",
						"type": "t_address"
					}
				],
				"numberOfBytes": "192"
			},
			"t_uint256": {
				"encoding": "inplace",
				"label": "uint256",
				"numberOfBytes": "32"
			}
		}
	}
}
