{
	"address": "0xD360D724aDCCEDf7285E8eFDDb98586686216Ff9",
	"abi": [
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_router",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "_link",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "_EPNS_COMM_ADDRESS",
					"type": "address"
				}
			],
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"inputs": [
				{
					"internalType": "uint64",
					"name": "destinationChainSelector",
					"type": "uint64"
				}
			],
			"name": "DestinationChainNotWhitelisted",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "target",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "FailedToWithdrawEth",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "currentBalance",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "calculatedFees",
					"type": "uint256"
				}
			],
			"name": "NotEnoughBalance",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "NothingToWithdraw",
			"type": "error"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "to",
					"type": "address"
				}
			],
			"name": "OwnershipTransferRequested",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "to",
					"type": "address"
				}
			],
			"name": "OwnershipTransferred",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "bytes32",
					"name": "messageId",
					"type": "bytes32"
				},
				{
					"indexed": true,
					"internalType": "uint64",
					"name": "destinationChainSelector",
					"type": "uint64"
				},
				{
					"indexed": false,
					"internalType": "address",
					"name": "receiver",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "address",
					"name": "token",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "tokenAmount",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "address",
					"name": "feeToken",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "fees",
					"type": "uint256"
				}
			],
			"name": "TokensTransferred",
			"type": "event"
		},
		{
			"inputs": [],
			"name": "EPNS_COMM_ADDRESS",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "acceptOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint64",
					"name": "_destinationChainSelector",
					"type": "uint64"
				}
			],
			"name": "denylistChain",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "owner",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				}
			],
			"name": "transferOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint64",
					"name": "_destinationChainSelector",
					"type": "uint64"
				},
				{
					"internalType": "address",
					"name": "_receiver",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "_token",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "_amount",
					"type": "uint256"
				}
			],
			"name": "transferTokensPayLINK",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "messageId",
					"type": "bytes32"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint64",
					"name": "_destinationChainSelector",
					"type": "uint64"
				},
				{
					"internalType": "address",
					"name": "_receiver",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "_token",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "_amount",
					"type": "uint256"
				}
			],
			"name": "transferTokensPayNative",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "messageId",
					"type": "bytes32"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint64",
					"name": "_destinationChainSelector",
					"type": "uint64"
				}
			],
			"name": "whitelistChain",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint64",
					"name": "",
					"type": "uint64"
				}
			],
			"name": "whitelistedChains",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_beneficiary",
					"type": "address"
				}
			],
			"name": "withdraw",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_beneficiary",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "_token",
					"type": "address"
				}
			],
			"name": "withdrawToken",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"stateMutability": "payable",
			"type": "receive"
		}
	],
	"transactionHash": "0x66aee7629527a14d2ceecb3b80ed178835ccc6e2681a576c90531d8f9e5b4282",
	"receipt": {
		"to": null,
		"from": "0xE8e1543235e6C35C656ef0b28526C61571583f4B",
		"contractAddress": "0xD360D724aDCCEDf7285E8eFDDb98586686216Ff9",
		"transactionIndex": 0,
		"gasUsed": "1331038",
		"logsBloom": "0x
		"blockHash": "0xd08e8c983df4b26758a06f51435aafdda4109e58da3057bb5738741ce2b2761e",
		"transactionHash": "0x66aee7629527a14d2ceecb3b80ed178835ccc6e2681a576c90531d8f9e5b4282",
		"logs": [
			{
				"transactionIndex": 0,
				"blockNumber": 41287367,
				"transactionHash": "0x66aee7629527a14d2ceecb3b80ed178835ccc6e2681a576c90531d8f9e5b4282",
				"address": "0x0000000000000000000000000000000000001010",
				"topics": [
					"0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
					"0x0000000000000000000000000000000000000000000000000000000000001010",
					"0x000000000000000000000000e8e1543235e6c35c656ef0b28526c61571583f4b",
					"0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
				],
				"data": "0x000000000000000000000000000000000000000000000000002f49b85674c2200000000000000000000000000000000000000000000000001e3fb104fbc2f10f0000000000000000000000000000000000000000000002da1ccf17980b9779220000000000000000000000000000000000000000000000001e10674ca54e2eef0000000000000000000000000000000000000000000002da1cfe6150620c3b42",
				"logIndex": 0,
				"blockHash": "0xd08e8c983df4b26758a06f51435aafdda4109e58da3057bb5738741ce2b2761e"
			}
		],
		"blockNumber": 41287367,
		"cumulativeGasUsed": "1331038",
		"status": 1,
		"byzantium": true
	},
	"args": [
		"0x70499c328e1E2a3c41108bd3730F6670a44595D1",
		"0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
		"0xb3971BCef2D791bc4027BbfedFb47319A4AAaaAa"
	],
	"numDeployments": 1,
	"solcInputHash": "ab58490f915daac0c62e7736f1b331b5",
	"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_EPNS_COMM_ADDRESS\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"DestinationChainNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FailedToWithdrawEth\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calculatedFees\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToWithdraw\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"TokensTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EPNS_COMM_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"denylistChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTokensPayLINK\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTokensPayNative\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"whitelistChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"whitelistedChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"transferTokensPayLINK(uint64,address,address,uint256)\":{\"details\":\"Assumes your contract has sufficient LINK tokens to pay for the fees.\",\"params\":{\"_amount\":\"token amount.\",\"_destinationChainSelector\":\"The identifier (aka selector) for the destination blockchain.\",\"_receiver\":\"The address of the recipient on the destination blockchain.\",\"_token\":\"token address.\"},\"returns\":{\"messageId\":\"The ID of the message that was sent.\"}},\"transferTokensPayNative(uint64,address,address,uint256)\":{\"details\":\"Assumes your contract has sufficient native gas like ETH on Ethereum or MATIC on Polygon.\",\"params\":{\"_amount\":\"token amount.\",\"_destinationChainSelector\":\"The identifier (aka selector) for the destination blockchain.\",\"_receiver\":\"The address of the recipient on the destination blockchain.\",\"_token\":\"token address.\"},\"returns\":{\"messageId\":\"The ID of the message that was sent.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"},\"transferTokensPayLINK(uint64,address,address,uint256)\":{\"notice\":\"Transfer tokens to receiver on the destination chain.pay in LINK.the token must be in the list of supported tokens.This function can only be called by the owner.\"},\"transferTokensPayNative(uint64,address,address,uint256)\":{\"notice\":\"Transfer tokens to receiver on the destination chain.Pay in native gas such as ETH on Ethereum or MATIC on Polgon.the token must be in the list of supported tokens.This function can only be called by the owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Gateway.sol\":\"Gateway\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns guaranteed execution fee for the specified message\\n  /// delivery to destination chain\\n  /// @dev returns 0 fee on invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9899fab6a40f68408ddf153612c553f2441ea27770176bf71ccce22c40393286\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit and strict = false.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // extraArgs will evolve to support new features\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit; // ATTENTION!!! MAX GAS LIMIT 4M FOR BETA TESTING\\n    bool strict; // See strict sequencing details below.\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x2fb8e11d517fa5ee213aaab3f4d416155cd2b72d61ba443dbeff6b41d29e9523\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwner} from \\\"../../ConfirmedOwner.sol\\\";\\n\\n/// @title The OwnerIsCreator contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract OwnerIsCreator is ConfirmedOwner {\\n  constructor() ConfirmedOwner(msg.sender) {}\\n}\\n\",\"keccak256\":\"0x010d0a67d81c4020004f72d95e8a7b08b98178de026e96565f315806e7525ada\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n}\",\"keccak256\":\"0xf7a52b7d3a7b79117544d6bbeb8564bd22c760c4937d69914b99641a957a8f2a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xac02fbc0c7d194e525a71f524d1f7c472df73e19c2b527d7b529badaeaf0ec51\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/Gateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IRouterClient} from '@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol';\\nimport {OwnerIsCreator} from '@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol';\\nimport {Client} from '@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol';\\nimport {LinkTokenInterface} from '@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol';\\n\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\nimport './interfaces/IERC20Extended.sol';\\nimport './interfaces/IPUSHCommInterface.sol';\\n\\ncontract Gateway is OwnerIsCreator {\\n\\tusing Strings for address;\\n\\tusing Strings for string;\\n\\tusing Strings for uint;\\n\\n\\tIRouterClient router;\\n\\tLinkTokenInterface linkToken;\\n\\n\\taddress public EPNS_COMM_ADDRESS;\\n\\n\\tmapping(uint64 => bool) public whitelistedChains;\\n\\n\\tevent TokensTransferred(\\n\\t\\tbytes32 indexed messageId,\\n\\t\\tuint64 indexed destinationChainSelector,\\n\\t\\taddress receiver,\\n\\t\\taddress token,\\n\\t\\tuint256 tokenAmount,\\n\\t\\taddress feeToken,\\n\\t\\tuint256 fees\\n\\t);\\n\\n\\terror NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees);\\n\\terror NothingToWithdraw();\\n\\terror FailedToWithdrawEth(address owner, address target, uint256 value);\\n\\terror DestinationChainNotWhitelisted(uint64 destinationChainSelector);\\n\\n\\tconstructor(address _router, address _link, address _EPNS_COMM_ADDRESS) {\\n\\t\\trouter = IRouterClient(_router);\\n\\t\\tlinkToken = LinkTokenInterface(_link);\\n\\n\\t\\tEPNS_COMM_ADDRESS = _EPNS_COMM_ADDRESS;\\n\\t}\\n\\n\\tmodifier onlyWhitelistedChain(uint64 _destinationChainSelector) {\\n\\t\\tif (!whitelistedChains[_destinationChainSelector])\\n\\t\\t\\trevert DestinationChainNotWhitelisted(_destinationChainSelector);\\n\\t\\t_;\\n\\t}\\n\\n\\treceive() external payable {}\\n\\n\\tfunction whitelistChain(uint64 _destinationChainSelector) external onlyOwner {\\n\\t\\twhitelistedChains[_destinationChainSelector] = true;\\n\\t}\\n\\n\\tfunction denylistChain(uint64 _destinationChainSelector) external onlyOwner {\\n\\t\\twhitelistedChains[_destinationChainSelector] = false;\\n\\t}\\n\\n\\t/// @notice Transfer tokens to receiver on the destination chain.\\n\\t/// @notice pay in LINK.\\n\\t/// @notice the token must be in the list of supported tokens.\\n\\t/// @notice This function can only be called by the owner.\\n\\t/// @dev Assumes your contract has sufficient LINK tokens to pay for the fees.\\n\\t/// @param _destinationChainSelector The identifier (aka selector) for the destination blockchain.\\n\\t/// @param _receiver The address of the recipient on the destination blockchain.\\n\\t/// @param _token token address.\\n\\t/// @param _amount token amount.\\n\\t/// @return messageId The ID of the message that was sent.\\n\\tfunction transferTokensPayLINK(\\n\\t\\tuint64 _destinationChainSelector,\\n\\t\\taddress _receiver,\\n\\t\\taddress _token,\\n\\t\\tuint256 _amount\\n\\t)\\n\\t\\texternal\\n\\t\\tonlyOwner\\n\\t\\tonlyWhitelistedChain(_destinationChainSelector)\\n\\t\\treturns (bytes32 messageId)\\n\\t{\\n\\t\\tClient.EVM2AnyMessage memory evm2AnyMessage = _buildCCIPMessage(\\n\\t\\t\\t_receiver,\\n\\t\\t\\t_token,\\n\\t\\t\\t_amount,\\n\\t\\t\\taddress(linkToken)\\n\\t\\t);\\n\\n\\t\\tuint256 fees = router.getFee(_destinationChainSelector, evm2AnyMessage);\\n\\n\\t\\tif (fees > linkToken.balanceOf(address(this)))\\n\\t\\t\\trevert NotEnoughBalance(linkToken.balanceOf(address(this)), fees);\\n\\n\\t\\tlinkToken.approve(address(router), fees);\\n\\t\\tIERC20(_token).approve(address(router), _amount);\\n\\n\\t\\tmessageId = router.ccipSend(_destinationChainSelector, evm2AnyMessage);\\n\\n\\t\\tif (EPNS_COMM_ADDRESS != address(0)) {\\n\\t\\t\\tIPUSHCommInterface(EPNS_COMM_ADDRESS).sendNotification(\\n\\t\\t\\t\\t0xaA7880DB88D8e051428b5204817e58D8327340De, // from channel\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tbytes(\\n\\t\\t\\t\\t\\tstring(\\n\\t\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\t'0',\\n\\t\\t\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t\\t\\t'3',\\n\\t\\t\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t\\t\\t'Congrats!',\\n\\t\\t\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t\\t\\t'You just sent ',\\n\\t\\t\\t\\t\\t\\t\\t(_amount / (10 ** uint(IERC20Extended(_token).decimals())))\\n\\t\\t\\t\\t\\t\\t\\t\\t.toString(),\\n\\t\\t\\t\\t\\t\\t\\t' CARBON! to Optimism'\\n\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\temit TokensTransferred(\\n\\t\\t\\tmessageId,\\n\\t\\t\\t_destinationChainSelector,\\n\\t\\t\\t_receiver,\\n\\t\\t\\t_token,\\n\\t\\t\\t_amount,\\n\\t\\t\\taddress(linkToken),\\n\\t\\t\\tfees\\n\\t\\t);\\n\\n\\t\\treturn messageId;\\n\\t}\\n\\n\\t/// @notice Transfer tokens to receiver on the destination chain.\\n\\t/// @notice Pay in native gas such as ETH on Ethereum or MATIC on Polgon.\\n\\t/// @notice the token must be in the list of supported tokens.\\n\\t/// @notice This function can only be called by the owner.\\n\\t/// @dev Assumes your contract has sufficient native gas like ETH on Ethereum or MATIC on Polygon.\\n\\t/// @param _destinationChainSelector The identifier (aka selector) for the destination blockchain.\\n\\t/// @param _receiver The address of the recipient on the destination blockchain.\\n\\t/// @param _token token address.\\n\\t/// @param _amount token amount.\\n\\t/// @return messageId The ID of the message that was sent.\\n\\tfunction transferTokensPayNative(\\n\\t\\tuint64 _destinationChainSelector,\\n\\t\\taddress _receiver,\\n\\t\\taddress _token,\\n\\t\\tuint256 _amount\\n\\t)\\n\\t\\texternal\\n\\t\\tonlyOwner\\n\\t\\tonlyWhitelistedChain(_destinationChainSelector)\\n\\t\\treturns (bytes32 messageId)\\n\\t{\\n\\t\\t// Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\n\\t\\t// address(0) means fees are paid in native gas\\n\\t\\tClient.EVM2AnyMessage memory evm2AnyMessage = _buildCCIPMessage(\\n\\t\\t\\t_receiver,\\n\\t\\t\\t_token,\\n\\t\\t\\t_amount,\\n\\t\\t\\taddress(0)\\n\\t\\t);\\n\\n\\t\\tuint256 fees = router.getFee(_destinationChainSelector, evm2AnyMessage);\\n\\n\\t\\tif (fees > address(this).balance)\\n\\t\\t\\trevert NotEnoughBalance(address(this).balance, fees);\\n\\n\\t\\tIERC20(_token).approve(address(router), _amount);\\n\\n\\t\\tmessageId = router.ccipSend{value: fees}(\\n\\t\\t\\t_destinationChainSelector,\\n\\t\\t\\tevm2AnyMessage\\n\\t\\t);\\n\\n\\t\\temit TokensTransferred(\\n\\t\\t\\tmessageId,\\n\\t\\t\\t_destinationChainSelector,\\n\\t\\t\\t_receiver,\\n\\t\\t\\t_token,\\n\\t\\t\\t_amount,\\n\\t\\t\\taddress(0),\\n\\t\\t\\tfees\\n\\t\\t);\\n\\n\\t\\treturn messageId;\\n\\t}\\n\\n\\t/// @notice Construct a CCIP message.\\n\\t/// @dev This function will create an EVM2AnyMessage struct with all the necessary information for tokens transfer.\\n\\t/// @param _receiver The address of the receiver.\\n\\t/// @param _token The token to be transferred.\\n\\t/// @param _amount The amount of the token to be transferred.\\n\\t/// @param _feeTokenAddress The address of the token used for fees. Set address(0) for native gas.\\n\\t/// @return Client.EVM2AnyMessage Returns an EVM2AnyMessage struct which contains information for sending a CCIP message.\\n\\tfunction _buildCCIPMessage(\\n\\t\\taddress _receiver,\\n\\t\\taddress _token,\\n\\t\\tuint256 _amount,\\n\\t\\taddress _feeTokenAddress\\n\\t) internal pure returns (Client.EVM2AnyMessage memory) {\\n\\t\\t// Set the token amounts\\n\\t\\tClient.EVMTokenAmount[] memory tokenAmounts = new Client.EVMTokenAmount[](\\n\\t\\t\\t1\\n\\t\\t);\\n\\t\\tClient.EVMTokenAmount memory tokenAmount = Client.EVMTokenAmount({\\n\\t\\t\\ttoken: _token,\\n\\t\\t\\tamount: _amount\\n\\t\\t});\\n\\t\\ttokenAmounts[0] = tokenAmount;\\n\\t\\t// Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\n\\t\\tClient.EVM2AnyMessage memory evm2AnyMessage = Client.EVM2AnyMessage({\\n\\t\\t\\treceiver: abi.encode(_receiver), // ABI-encoded receiver address\\n\\t\\t\\tdata: '', // No data\\n\\t\\t\\ttokenAmounts: tokenAmounts, // The amount and type of token being transferred\\n\\t\\t\\textraArgs: Client._argsToBytes(\\n\\t\\t\\t\\t// Additional arguments, setting gas limit to 0 as we are not sending any data and non-strict sequencing mode\\n\\t\\t\\t\\tClient.EVMExtraArgsV1({gasLimit: 0, strict: false})\\n\\t\\t\\t),\\n\\t\\t\\t// Set the feeToken to a feeTokenAddress, indicating specific asset will be used for fees\\n\\t\\t\\tfeeToken: _feeTokenAddress\\n\\t\\t});\\n\\t\\treturn evm2AnyMessage;\\n\\t}\\n\\n\\tfunction withdraw(address _beneficiary) public onlyOwner {\\n\\t\\tuint256 amount = address(this).balance;\\n\\n\\t\\tif (amount == 0) revert NothingToWithdraw();\\n\\n\\t\\t(bool sent, ) = _beneficiary.call{value: amount}('');\\n\\n\\t\\tif (!sent) revert FailedToWithdrawEth(msg.sender, _beneficiary, amount);\\n\\t}\\n\\n\\tfunction withdrawToken(\\n\\t\\taddress _beneficiary,\\n\\t\\taddress _token\\n\\t) public onlyOwner {\\n\\t\\tuint256 amount = IERC20(_token).balanceOf(address(this));\\n\\n\\t\\tif (amount == 0) revert NothingToWithdraw();\\n\\n\\t\\tIERC20(_token).transfer(_beneficiary, amount);\\n\\t}\\n}\\n\",\"keccak256\":\"0x857935338779e612598a8d70ec4d5dd79e8123d5c269049a385ed97d7c7eb397\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IERC20} from '@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol';\\n\\ninterface IERC20Extended is IERC20 {\\n\\tfunction decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6797a5b92c45b0a90221629227b156b391ff91b6bdee123e4c4620e8d094c0a4\",\"license\":\"MIT\"},\"contracts/interfaces/IPUSHCommInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// PUSH Comm Contract Interface\\ninterface IPUSHCommInterface {\\n\\tfunction sendNotification(\\n\\t\\taddress _channel,\\n\\t\\taddress _recipient,\\n\\t\\tbytes calldata _identity\\n\\t) external;\\n}\\n\",\"keccak256\":\"0xf979e927a870830d182df45e2b1545520d7781c0e2012738b115a709b1b9e95a\",\"license\":\"MIT\"}},\"version\":1}",
	"bytecode": "0x60806040523480156200001157600080fd5b5060405162001780380380620017808339810160408190526200003491620001cc565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be8162000104565b5050600280546001600160a01b039586166001600160a01b0319918216179091556003805494861694821694909417909355506004805491909316911617905562000216565b336001600160a01b038216036200015e5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b80516001600160a01b0381168114620001c757600080fd5b919050565b600080600060608486031215620001e257600080fd5b620001ed84620001af565b9250620001fd60208501620001af565b91506200020d60408501620001af565b90509250925092565b61155a80620002266000396000f3fe6080604052600436106100a05760003560e01c8063763574f611610064578063763574f61461017957806379ba5097146101b95780638da5cb5b146101ce57806395e1402c146101ec578063d345ac7d1461020c578063f2fde38b1461022c57600080fd5b806334625dcc146100ac5780633aeac4e1146100ce57806348a3b4a4146100ee57806351419b4b1461012b57806351cff8d91461015957600080fd5b366100a757005b600080fd5b3480156100b857600080fd5b506100cc6100c73660046110af565b61024c565b005b3480156100da57600080fd5b506100cc6100e93660046110e8565b610276565b3480156100fa57600080fd5b5060045461010e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561013757600080fd5b5061014b61014636600461111b565b610385565b604051908152602001610122565b34801561016557600080fd5b506100cc610174366004611166565b6105f5565b34801561018557600080fd5b506101a96101943660046110af565b60056020526000908152604090205460ff1681565b6040519015158152602001610122565b3480156101c557600080fd5b506100cc6106b1565b3480156101da57600080fd5b506000546001600160a01b031661010e565b3480156101f857600080fd5b5061014b61020736600461111b565b61075b565b34801561021857600080fd5b506100cc6102273660046110af565b610c57565b34801561023857600080fd5b506100cc610247366004611166565b610c84565b610254610c98565b67ffffffffffffffff166000908152600560205260409020805460ff19169055565b61027e610c98565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156102c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e99190611181565b90508060000361030c57604051630686827b60e51b815260040160405180910390fd5b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af115801561035b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037f919061119a565b50505050565b600061038f610c98565b67ffffffffffffffff8516600090815260056020526040902054859060ff166103dc57604051632328ea8d60e11b815267ffffffffffffffff821660048201526024015b60405180910390fd5b60006103eb8686866000610ced565b6002546040516320487ded60e01b81529192506000916001600160a01b03909116906320487ded90610423908b90869060040161120c565b602060405180830381865afa158015610440573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104649190611181565b90504781111561049057604051634787a10360e11b8152476004820152602481018290526044016103d3565b60025460405163095ea7b360e01b81526001600160a01b039182166004820152602481018790529087169063095ea7b3906044016020604051808303816000875af11580156104e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610507919061119a565b506002546040516396f4e9f960e01b81526001600160a01b03909116906396f4e9f990839061053c908c90879060040161120c565b60206040518083038185885af115801561055a573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061057f9190611181565b604080516001600160a01b03808b16825289166020820152908101879052600060608201526080810183905290945067ffffffffffffffff89169085907fc15fb748c32ba4eb29c1c311e78533f93b4425eab49ea87c6fe4279ecadca0439060a0015b60405180910390a3505050949350505050565b6105fd610c98565b47600081900361062057604051630686827b60e51b815260040160405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461066d576040519150601f19603f3d011682016040523d82523d6000602084013e610672565b606091505b50509050806106ac57604051639d11f56360e01b81523360048201526001600160a01b0384166024820152604481018390526064016103d3565b505050565b6001546001600160a01b031633146107045760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064016103d3565b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6000610765610c98565b67ffffffffffffffff8516600090815260056020526040902054859060ff166107ad57604051632328ea8d60e11b815267ffffffffffffffff821660048201526024016103d3565b6003546000906107cb908790879087906001600160a01b0316610ced565b6002546040516320487ded60e01b81529192506000916001600160a01b03909116906320487ded90610803908b90869060040161120c565b602060405180830381865afa158015610820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108449190611181565b6003546040516370a0823160e01b81523060048201529192506001600160a01b0316906370a0823190602401602060405180830381865afa15801561088d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b19190611181565b811115610948576003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610900573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109249190611181565b604051634787a10360e11b81526004810191909152602481018290526044016103d3565b60035460025460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b3906044016020604051808303816000875af115801561099d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c1919061119a565b5060025460405163095ea7b360e01b81526001600160a01b039182166004820152602481018790529087169063095ea7b3906044016020604051808303816000875af1158015610a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a39919061119a565b506002546040516396f4e9f960e01b81526001600160a01b03909116906396f4e9f990610a6c908b90869060040161120c565b6020604051808303816000875af1158015610a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaf9190611181565b6004549094506001600160a01b031615610bef57600460009054906101000a90046001600160a01b03166001600160a01b031663ba3d69d773aa7880db88d8e051428b5204817e58d8327340de33610b7f8a6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6291906112e6565b610b709060ff16600a611403565b610b7a908b61140f565b610e7d565b604051602001610b8f9190611431565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401610bbc939291906114c3565b600060405180830381600087803b158015610bd657600080fd5b505af1158015610bea573d6000803e3d6000fd5b505050505b600354604080516001600160a01b03808b168252808a166020830152918101889052911660608201526080810182905267ffffffffffffffff89169085907fc15fb748c32ba4eb29c1c311e78533f93b4425eab49ea87c6fe4279ecadca0439060a0016105e2565b610c5f610c98565b67ffffffffffffffff166000908152600560205260409020805460ff19166001179055565b610c8c610c98565b610c9581610f10565b50565b6000546001600160a01b03163314610ceb5760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016103d3565b565b610d286040518060a0016040528060608152602001606081526020016060815260200160006001600160a01b03168152602001606081525090565b604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610d3f57905050905060006040518060400160405280876001600160a01b031681526020018681525090508082600081518110610d9e57610d9e61150e565b60209081029190910101526040805160a081019091526001600160a01b03881660c08201526000908060e081016040516020818303038152906040528152602001604051806020016040528060008152508152602001848152602001866001600160a01b03168152602001610e6f604051806040016040528060008152602001600015158152506040805182516024820152602092830151151560448083019190915282518083039091018152606490910190915290810180516001600160e01b03166397a657c960e01b17905290565b905298975050505050505050565b60606000610e8a83610fb9565b600101905060008167ffffffffffffffff811115610eaa57610eaa6114f8565b6040519080825280601f01601f191660200182016040528015610ed4576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610ede57509392505050565b336001600160a01b03821603610f685760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016103d3565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610ff85772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611024576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061104257662386f26fc10000830492506010015b6305f5e100831061105a576305f5e100830492506008015b612710831061106e57612710830492506004015b60648310611080576064830492506002015b600a831061108c576001015b92915050565b803567ffffffffffffffff811681146110aa57600080fd5b919050565b6000602082840312156110c157600080fd5b6110ca82611092565b9392505050565b80356001600160a01b03811681146110aa57600080fd5b600080604083850312156110fb57600080fd5b611104836110d1565b9150611112602084016110d1565b90509250929050565b6000806000806080858703121561113157600080fd5b61113a85611092565b9350611148602086016110d1565b9250611156604086016110d1565b9396929550929360600135925050565b60006020828403121561117857600080fd5b6110ca826110d1565b60006020828403121561119357600080fd5b5051919050565b6000602082840312156111ac57600080fd5b815180151581146110ca57600080fd5b60005b838110156111d75781810151838201526020016111bf565b50506000910152565b600081518084526111f88160208601602086016111bc565b601f01601f19169290920160200192915050565b6000604067ffffffffffffffff8516835260208181850152845160a08386015261123960e08601826111e0565b905081860151603f198087840301606088015261125683836111e0565b88860151888203830160808a01528051808352908601945060009350908501905b808410156112a957845180516001600160a01b0316835286015186830152938501936001939093019290860190611277565b5060608901516001600160a01b031660a08901526080890151888203830160c08a015295506112d881876111e0565b9a9950505050505050505050565b6000602082840312156112f857600080fd5b815160ff811681146110ca57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561135a57816000190482111561134057611340611309565b8085161561134d57918102915b93841c9390800290611324565b509250929050565b6000826113715750600161108c565b8161137e5750600061108c565b8160018114611394576002811461139e576113ba565b600191505061108c565b60ff8411156113af576113af611309565b50506001821b61108c565b5060208310610133831016604e8410600b84101617156113dd575081810a61108c565b6113e7838361131f565b80600019048211156113fb576113fb611309565b029392505050565b60006110ca8383611362565b60008261142c57634e487b7160e01b600052601260045260246000fd5b500490565b600360fc1b81526000602b60f81b806001840152603360f81b600284015280600384015268436f6e67726174732160b81b600484015280600d840152506d02cb7ba90353ab9ba1039b2b73a160951b600e830152825161149881601c8501602087016111bc565b7320434152424f4e2120746f204f7074696d69736d60601b601c939091019283015250603001919050565b6001600160a01b038481168252831660208201526060604082018190526000906114ef908301846111e0565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220fef514722ceb4a77da27a5d9db00c472d38294b60c73753a88fa7f3aef75fd8464736f6c63430008140033",
	"deployedBytecode": "0x6080604052600436106100a05760003560e01c8063763574f611610064578063763574f61461017957806379ba5097146101b95780638da5cb5b146101ce57806395e1402c146101ec578063d345ac7d1461020c578063f2fde38b1461022c57600080fd5b806334625dcc146100ac5780633aeac4e1146100ce57806348a3b4a4146100ee57806351419b4b1461012b57806351cff8d91461015957600080fd5b366100a757005b600080fd5b3480156100b857600080fd5b506100cc6100c73660046110af565b61024c565b005b3480156100da57600080fd5b506100cc6100e93660046110e8565b610276565b3480156100fa57600080fd5b5060045461010e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561013757600080fd5b5061014b61014636600461111b565b610385565b604051908152602001610122565b34801561016557600080fd5b506100cc610174366004611166565b6105f5565b34801561018557600080fd5b506101a96101943660046110af565b60056020526000908152604090205460ff1681565b6040519015158152602001610122565b3480156101c557600080fd5b506100cc6106b1565b3480156101da57600080fd5b506000546001600160a01b031661010e565b3480156101f857600080fd5b5061014b61020736600461111b565b61075b565b34801561021857600080fd5b506100cc6102273660046110af565b610c57565b34801561023857600080fd5b506100cc610247366004611166565b610c84565b610254610c98565b67ffffffffffffffff166000908152600560205260409020805460ff19169055565b61027e610c98565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156102c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e99190611181565b90508060000361030c57604051630686827b60e51b815260040160405180910390fd5b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af115801561035b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037f919061119a565b50505050565b600061038f610c98565b67ffffffffffffffff8516600090815260056020526040902054859060ff166103dc57604051632328ea8d60e11b815267ffffffffffffffff821660048201526024015b60405180910390fd5b60006103eb8686866000610ced565b6002546040516320487ded60e01b81529192506000916001600160a01b03909116906320487ded90610423908b90869060040161120c565b602060405180830381865afa158015610440573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104649190611181565b90504781111561049057604051634787a10360e11b8152476004820152602481018290526044016103d3565b60025460405163095ea7b360e01b81526001600160a01b039182166004820152602481018790529087169063095ea7b3906044016020604051808303816000875af11580156104e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610507919061119a565b506002546040516396f4e9f960e01b81526001600160a01b03909116906396f4e9f990839061053c908c90879060040161120c565b60206040518083038185885af115801561055a573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061057f9190611181565b604080516001600160a01b03808b16825289166020820152908101879052600060608201526080810183905290945067ffffffffffffffff89169085907fc15fb748c32ba4eb29c1c311e78533f93b4425eab49ea87c6fe4279ecadca0439060a0015b60405180910390a3505050949350505050565b6105fd610c98565b47600081900361062057604051630686827b60e51b815260040160405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461066d576040519150601f19603f3d011682016040523d82523d6000602084013e610672565b606091505b50509050806106ac57604051639d11f56360e01b81523360048201526001600160a01b0384166024820152604481018390526064016103d3565b505050565b6001546001600160a01b031633146107045760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064016103d3565b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6000610765610c98565b67ffffffffffffffff8516600090815260056020526040902054859060ff166107ad57604051632328ea8d60e11b815267ffffffffffffffff821660048201526024016103d3565b6003546000906107cb908790879087906001600160a01b0316610ced565b6002546040516320487ded60e01b81529192506000916001600160a01b03909116906320487ded90610803908b90869060040161120c565b602060405180830381865afa158015610820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108449190611181565b6003546040516370a0823160e01b81523060048201529192506001600160a01b0316906370a0823190602401602060405180830381865afa15801561088d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b19190611181565b811115610948576003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610900573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109249190611181565b604051634787a10360e11b81526004810191909152602481018290526044016103d3565b60035460025460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b3906044016020604051808303816000875af115801561099d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c1919061119a565b5060025460405163095ea7b360e01b81526001600160a01b039182166004820152602481018790529087169063095ea7b3906044016020604051808303816000875af1158015610a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a39919061119a565b506002546040516396f4e9f960e01b81526001600160a01b03909116906396f4e9f990610a6c908b90869060040161120c565b6020604051808303816000875af1158015610a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaf9190611181565b6004549094506001600160a01b031615610bef57600460009054906101000a90046001600160a01b03166001600160a01b031663ba3d69d773aa7880db88d8e051428b5204817e58d8327340de33610b7f8a6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6291906112e6565b610b709060ff16600a611403565b610b7a908b61140f565b610e7d565b604051602001610b8f9190611431565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401610bbc939291906114c3565b600060405180830381600087803b158015610bd657600080fd5b505af1158015610bea573d6000803e3d6000fd5b505050505b600354604080516001600160a01b03808b168252808a166020830152918101889052911660608201526080810182905267ffffffffffffffff89169085907fc15fb748c32ba4eb29c1c311e78533f93b4425eab49ea87c6fe4279ecadca0439060a0016105e2565b610c5f610c98565b67ffffffffffffffff166000908152600560205260409020805460ff19166001179055565b610c8c610c98565b610c9581610f10565b50565b6000546001600160a01b03163314610ceb5760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016103d3565b565b610d286040518060a0016040528060608152602001606081526020016060815260200160006001600160a01b03168152602001606081525090565b604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610d3f57905050905060006040518060400160405280876001600160a01b031681526020018681525090508082600081518110610d9e57610d9e61150e565b60209081029190910101526040805160a081019091526001600160a01b03881660c08201526000908060e081016040516020818303038152906040528152602001604051806020016040528060008152508152602001848152602001866001600160a01b03168152602001610e6f604051806040016040528060008152602001600015158152506040805182516024820152602092830151151560448083019190915282518083039091018152606490910190915290810180516001600160e01b03166397a657c960e01b17905290565b905298975050505050505050565b60606000610e8a83610fb9565b600101905060008167ffffffffffffffff811115610eaa57610eaa6114f8565b6040519080825280601f01601f191660200182016040528015610ed4576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610ede57509392505050565b336001600160a01b03821603610f685760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016103d3565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610ff85772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611024576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061104257662386f26fc10000830492506010015b6305f5e100831061105a576305f5e100830492506008015b612710831061106e57612710830492506004015b60648310611080576064830492506002015b600a831061108c576001015b92915050565b803567ffffffffffffffff811681146110aa57600080fd5b919050565b6000602082840312156110c157600080fd5b6110ca82611092565b9392505050565b80356001600160a01b03811681146110aa57600080fd5b600080604083850312156110fb57600080fd5b611104836110d1565b9150611112602084016110d1565b90509250929050565b6000806000806080858703121561113157600080fd5b61113a85611092565b9350611148602086016110d1565b9250611156604086016110d1565b9396929550929360600135925050565b60006020828403121561117857600080fd5b6110ca826110d1565b60006020828403121561119357600080fd5b5051919050565b6000602082840312156111ac57600080fd5b815180151581146110ca57600080fd5b60005b838110156111d75781810151838201526020016111bf565b50506000910152565b600081518084526111f88160208601602086016111bc565b601f01601f19169290920160200192915050565b6000604067ffffffffffffffff8516835260208181850152845160a08386015261123960e08601826111e0565b905081860151603f198087840301606088015261125683836111e0565b88860151888203830160808a01528051808352908601945060009350908501905b808410156112a957845180516001600160a01b0316835286015186830152938501936001939093019290860190611277565b5060608901516001600160a01b031660a08901526080890151888203830160c08a015295506112d881876111e0565b9a9950505050505050505050565b6000602082840312156112f857600080fd5b815160ff811681146110ca57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561135a57816000190482111561134057611340611309565b8085161561134d57918102915b93841c9390800290611324565b509250929050565b6000826113715750600161108c565b8161137e5750600061108c565b8160018114611394576002811461139e576113ba565b600191505061108c565b60ff8411156113af576113af611309565b50506001821b61108c565b5060208310610133831016604e8410600b84101617156113dd575081810a61108c565b6113e7838361131f565b80600019048211156113fb576113fb611309565b029392505050565b60006110ca8383611362565b60008261142c57634e487b7160e01b600052601260045260246000fd5b500490565b600360fc1b81526000602b60f81b806001840152603360f81b600284015280600384015268436f6e67726174732160b81b600484015280600d840152506d02cb7ba90353ab9ba1039b2b73a160951b600e830152825161149881601c8501602087016111bc565b7320434152424f4e2120746f204f7074696d69736d60601b601c939091019283015250603001919050565b6001600160a01b038481168252831660208201526060604082018190526000906114ef908301846111e0565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220fef514722ceb4a77da27a5d9db00c472d38294b60c73753a88fa7f3aef75fd8464736f6c63430008140033",
	"devdoc": {
		"kind": "dev",
		"methods": {
			"transferTokensPayLINK(uint64,address,address,uint256)": {
				"details": "Assumes your contract has sufficient LINK tokens to pay for the fees.",
				"params": {
					"_amount": "token amount.",
					"_destinationChainSelector": "The identifier (aka selector) for the destination blockchain.",
					"_receiver": "The address of the recipient on the destination blockchain.",
					"_token": "token address."
				},
				"returns": {
					"messageId": "The ID of the message that was sent."
				}
			},
			"transferTokensPayNative(uint64,address,address,uint256)": {
				"details": "Assumes your contract has sufficient native gas like ETH on Ethereum or MATIC on Polygon.",
				"params": {
					"_amount": "token amount.",
					"_destinationChainSelector": "The identifier (aka selector) for the destination blockchain.",
					"_receiver": "The address of the recipient on the destination blockchain.",
					"_token": "token address."
				},
				"returns": {
					"messageId": "The ID of the message that was sent."
				}
			}
		},
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {
			"acceptOwnership()": {
				"notice": "Allows an ownership transfer to be completed by the recipient."
			},
			"owner()": {
				"notice": "Get the current owner"
			},
			"transferOwnership(address)": {
				"notice": "Allows an owner to begin transferring ownership to a new address, pending."
			},
			"transferTokensPayLINK(uint64,address,address,uint256)": {
				"notice": "Transfer tokens to receiver on the destination chain.pay in LINK.the token must be in the list of supported tokens.This function can only be called by the owner."
			},
			"transferTokensPayNative(uint64,address,address,uint256)": {
				"notice": "Transfer tokens to receiver on the destination chain.Pay in native gas such as ETH on Ethereum or MATIC on Polgon.the token must be in the list of supported tokens.This function can only be called by the owner."
			}
		},
		"version": 1
	},
	"storageLayout": {
		"storage": [
			{
				"astId": 27,
				"contract": "contracts/Gateway.sol:Gateway",
				"label": "s_owner",
				"offset": 0,
				"slot": "0",
				"type": "t_address"
			},
			{
				"astId": 29,
				"contract": "contracts/Gateway.sol:Gateway",
				"label": "s_pendingOwner",
				"offset": 0,
				"slot": "1",
				"type": "t_address"
			},
			{
				"astId": 8037,
				"contract": "contracts/Gateway.sol:Gateway",
				"label": "router",
				"offset": 0,
				"slot": "2",
				"type": "t_contract(IRouterClient)233"
			},
			{
				"astId": 8040,
				"contract": "contracts/Gateway.sol:Gateway",
				"label": "linkToken",
				"offset": 0,
				"slot": "3",
				"type": "t_contract(LinkTokenInterface)1657"
			},
			{
				"astId": 8042,
				"contract": "contracts/Gateway.sol:Gateway",
				"label": "EPNS_COMM_ADDRESS",
				"offset": 0,
				"slot": "4",
				"type": "t_address"
			},
			{
				"astId": 8046,
				"contract": "contracts/Gateway.sol:Gateway",
				"label": "whitelistedChains",
				"offset": 0,
				"slot": "5",
				"type": "t_mapping(t_uint64,t_bool)"
			}
		],
		"types": {
			"t_address": {
				"encoding": "inplace",
				"label": "address",
				"numberOfBytes": "20"
			},
			"t_bool": {
				"encoding": "inplace",
				"label": "bool",
				"numberOfBytes": "1"
			},
			"t_contract(IRouterClient)233": {
				"encoding": "inplace",
				"label": "contract IRouterClient",
				"numberOfBytes": "20"
			},
			"t_contract(LinkTokenInterface)1657": {
				"encoding": "inplace",
				"label": "contract LinkTokenInterface",
				"numberOfBytes": "20"
			},
			"t_mapping(t_uint64,t_bool)": {
				"encoding": "mapping",
				"key": "t_uint64",
				"label": "mapping(uint64 => bool)",
				"numberOfBytes": "32",
				"value": "t_bool"
			},
			"t_uint64": {
				"encoding": "inplace",
				"label": "uint64",
				"numberOfBytes": "8"
			}
		}
	}
}
